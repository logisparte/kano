#!/bin/sh

. "$KANO_HELPERS/fail"
. "$KANO_HELPERS/report"

PACKAGE_NAME="kano"
ARTIFACT="$PACKAGE_NAME.tar.gz"

release_help() {
  echo "Package the build and release it either locally (to preview) or to GitHub"
}

release() {
  VERSION="$1"

  if [ -z "$CI" ]; then
    _fail "Releases must be handled by the continuous delivery pipeline on GitHub"
  fi

  case "$VERSION" in
    *.*.*)
      _release_version "$VERSION"
      ;;

    "")
      _fail "No version provided"
      ;;

    *)
      _fail "Unknown version pattern. Must be a semantic version (x.x.x)"
      ;;

  esac
}

_release_version() {
  VERSION="$1"

  _info "Releasing version: $VERSION"

  _info "Packaging artifact..."
  _make_release
  tar -czf "$ARTIFACT" -C "$RELEASE_DIRECTORY" .
  CHECKSUM="$(shasum -a 256 "$ARTIFACT" | cut -d " " -f 1)"
  _info "Packaged $ARTIFACT, checksum is: $CHECKSUM"

  _login_to_github
  _release_to_github "$VERSION" "$CHECKSUM"
  _update_package_definition_in_index "$VERSION" "$CHECKSUM"
  report success "[release] Pull request for $PACKAGE_NAME $VERSION opened in package index"
}

_make_release() {
  rm -rf "$RELEASE_DIRECTORY"
  mkdir -p "$RELEASE_DIRECTORY"
  cp LICENSE "$RELEASE_DIRECTORY"
  cp distribution/install "$RELEASE_DIRECTORY"
  cp distribution/uninstall "$RELEASE_DIRECTORY"

  mkdir -p "$RELEASE_DIRECTORY/share/doc"
  cp -R docs/* "$RELEASE_DIRECTORY/share/doc"

  mkdir -p "$RELEASE_DIRECTORY/libexec"
  cp -R "$BUILD_DIRECTORY"/* "$RELEASE_DIRECTORY/libexec"
}

_login_to_github() {
  _info "Logging in to Github"
  echo "$HELOT_GITHUB_ACCESS_TOKEN" | gh auth login --with-token
}

_release_to_github() {
  VERSION="$1"
  CHECKSUM="$2"

  _info "Creating release"
  DESCRIPTION="$(git tag -n32 -l "$VERSION" | sed -E "s/$VERSION//" | awk '{$1=$1};1')"
  gh release create "$VERSION" "$ARTIFACT" --title "$VERSION" --notes "$DESCRIPTION"
}

_update_package_definition_in_index() {
  VERSION="$1"
  CHECKSUM="$2"
  PROJECT_DIRECTORY="$PWD"
  PACKAGE_INDEX_RELEASE_BRANCH_NAME="$PACKAGE_NAME-$VERSION"

  _info "Updating package definition"
  cd .. || fail
  gh repo clone logisparte/homebrew-packages
  cd homebrew-packages || fail
  git checkout -b "$PACKAGE_INDEX_RELEASE_BRANCH_NAME"

   LANG=C sed \
    -e "s/\${VERSION}/$VERSION/g" \
    -e "s/\${CHECKSUM}/$CHECKSUM/g" \
    "$PROJECT_DIRECTORY/distribution/formula.rb" > "$PACKAGE_NAME.rb"

  git commit -a -m "chore($PACKAGE_NAME): released $VERSION"
  git push origin "$PACKAGE_INDEX_RELEASE_BRANCH_NAME"
  gh pr create --fill --base master
}

_info() {
  MESSAGE="$1"

  report info "[release] $MESSAGE"
}

_fail() {
  MESSAGE="$1"

  fail "[release] $MESSAGE"
}
