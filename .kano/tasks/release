#!/bin/sh

. "$KANO_HELPERS/fail"
. "$KANO_HELPERS/report"

PACKAGE="kano"
PACKAGE_ARCHIVE="$PACKAGE.tar.gz"
PACKAGE_DIRECTORY="$RELEASE_DIRECTORY/$PACKAGE"
export GIT_CEILING_DIRECTORIES="$PWD"

release_help() {
  echo "Package the build and release it to GitHub"
}

release() {
  VERSION="$1"
  GIT_NAME="$2"
  GIT_EMAIL="$3"
  GITHUB_ACCESS_TOKEN="$4"

  case "$VERSION" in
    *.*.*)
      _login_to_github "$GIT_NAME" "$GIT_EMAIL" "$GITHUB_ACCESS_TOKEN"
      _release_version "$VERSION"
      ;;

    "")
      _fail "No version provided"
      ;;

    *)
      _fail "Unknown version pattern. Must be a semantic version (x.x.x)"
      ;;

  esac
}

_login_to_github() {
  GIT_NAME="$1"
  GIT_EMAIL="$2"
  GITHUB_ACCESS_TOKEN="$3"

  if [ -z "$GIT_NAME" ]; then
    _fail "No git name provided"
  fi

  if [ -z "$GIT_EMAIL" ]; then
    _fail "No git email provided"
  fi

  if [ -z "$GITHUB_ACCESS_TOKEN" ]; then
    _fail "No GitHub access token provided"
  fi

  _info "Configuring git for GitHub"
  kano configure_github --global \
    "$GIT_NAME" \
    "$GIT_EMAIL" \
    "$GITHUB_ACCESS_TOKEN"

  _info "Logging in to GitHub"
  echo "$GITHUB_ACCESS_TOKEN" | gh auth login --with-token
}

_release_version() {
  VERSION="$1"

  _info "Releasing version: $VERSION"

  _info "Packaging..."
  _make_package_directory
  tar -czf "$PACKAGE_ARCHIVE" -C "$RELEASE_DIRECTORY" .
  CHECKSUM="$(shasum -a 256 "$PACKAGE_ARCHIVE" | cut -d " " -f 1)"
  _info "Packaged $PACKAGE_ARCHIVE, checksum is: $CHECKSUM"

  _release_to_github "$VERSION" "$CHECKSUM"
  _update_package_definition_in_index "$VERSION" "$CHECKSUM"
  report success "[release] Pull request for $PACKAGE $VERSION opened in package index"
}

_make_package_directory() {
  rm -rf "$PACKAGE_DIRECTORY"
  mkdir -p "$PACKAGE_DIRECTORY"
  cp LICENSE "$PACKAGE_DIRECTORY"
  cp distribution/install "$PACKAGE_DIRECTORY"
  cp distribution/uninstall "$PACKAGE_DIRECTORY"

  mkdir -p "$PACKAGE_DIRECTORY/share/doc"
  cp -R docs/* "$PACKAGE_DIRECTORY/share/doc"

  mkdir -p "$PACKAGE_DIRECTORY/libexec"
  cp -R "$BUILD_DIRECTORY"/* "$PACKAGE_DIRECTORY/libexec"
}

_release_to_github() {
  VERSION="$1"
  CHECKSUM="$2"

  _info "Creating release"
  git config --global --add safe.directory "$PWD"
  DESCRIPTION="$(git tag -n100 "$VERSION" | awk '{$1=$1; print}' | cut -d ' ' -f 2-)"
  gh release create \
    --title "$VERSION" \
    --notes "$DESCRIPTION" \
    "$VERSION" "$PACKAGE_ARCHIVE"
}

_update_package_definition_in_index() {
  VERSION="$1"
  CHECKSUM="$2"
  PROJECT_DIRECTORY="$PWD"
  PACKAGE_INDEX_RELEASE_BRANCH_NAME="$PACKAGE-$VERSION"

  _info "Updating package definition"
  cd .. || fail
  gh repo clone logisparte/homebrew-packages
  cd homebrew-packages || fail
  git config --global --add safe.directory "$PWD"
  git checkout -b "$PACKAGE_INDEX_RELEASE_BRANCH_NAME"

   LANG=C sed \
    -e "s/\${VERSION}/$VERSION/g" \
    -e "s/\${CHECKSUM}/$CHECKSUM/g" \
    "$PROJECT_DIRECTORY/distribution/formula.rb" > "$PACKAGE.rb"

  git commit -a -m "chore($PACKAGE): released $VERSION"
  git push origin "$PACKAGE_INDEX_RELEASE_BRANCH_NAME"
  gh pr create --fill --base master
}

_info() {
  MESSAGE="$1"

  report info "[release] $MESSAGE"
}

_fail() {
  MESSAGE="$1"

  fail "[release] $MESSAGE"
}
