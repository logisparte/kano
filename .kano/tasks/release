#!/bin/sh

. "$KANO_HELPERS/fail"
. "$KANO_HELPERS/report"

PACKAGE="kano"
PACKAGE_DIRECTORY="$RELEASE_DIRECTORY/$PACKAGE"
PACKAGE_ARCHIVE="$PACKAGE.tar.gz"

release_help() {
  echo "Package the build and release it to GitHub"
}

release() {
  VERSION="$1"

  case "$VERSION" in
    local)
      _release_local
      ;;

    beta-*)
      _release_beta "$@"
      ;;

    *.*.*)
      _release_public "$@"
      ;;

    "")
      _fail "No version provided"
      ;;

    *)
      # shellcheck disable=SC2116
      _fail "$(
        echo \
          "Unknown version pattern." \
          "Must either be 'local', a beta name (beta-*) a semantic version (*.*.*)"
      )"
      ;;
  esac
}

_release_local() {
  _info "Creating local release"
  _assemble_package_directory
  CHECKSUM="$(_archive_package_directory)"
  _success "Successfully released $PACKAGE_ARCHIVE locally. Checksum is: $CHECKSUM"
}

_release_public() {
  VERSION="$1"
  GITHUB_TOKEN="$2"

  _info "Creating public release"
  _assemble_package_directory
  CHECKSUM="$(_archive_package_directory)"
  _info "Packaged $PACKAGE_ARCHIVE. Checksum is: $CHECKSUM"
  _login_to_github "$GITHUB_TOKEN"

  DESCRIPTION="$(git tag -n100 "$VERSION" | awk '{$1=$1; print}' | cut -d ' ' -f 2-)"
  gh release create \
    --title "$VERSION" \
    --notes "$DESCRIPTION" \
    "$VERSION" "$PACKAGE_ARCHIVE"

  _info "Updating package definition"
  PROJECT_DIRECTORY="$PWD"
  PACKAGE_INDEX_BRANCH="$PACKAGE-$VERSION"
  gh repo clone "logisparte/homebrew-packages" "../homebrew-packages"
  cd "../homebrew-packages" || fail
  git checkout -b "$PACKAGE_INDEX_BRANCH"
  LANG=C sed \
    -e "s/\${PASCAL_CASED_PACKAGE}/$(_case_dashed_to_pascal "$PACKAGE")/g" \
    -e "s/\${RELEASE}/$VERSION/g" \
    -e "/version \"\${VERSION}\"/d" \
    -e "s/\${CHECKSUM}/$CHECKSUM/g" \
    "$PROJECT_DIRECTORY/distribution/formula.rb" > "$PACKAGE.rb"
  git add --all
  git commit --message "x($PACKAGE): released $VERSION"
  git push --set-upstream origin "$PACKAGE_INDEX_BRANCH"
  gh pr create --fill --base master
  _success "Pull request for $PACKAGE $VERSION opened in package index"
}

_release_beta() {
  VERSION="$1"
  GITHUB_TOKEN="$2"

  _info "Creating beta release"
  _assemble_package_directory
  CHECKSUM="$(_archive_package_directory)"
  _info "Packaged $PACKAGE_ARCHIVE. Checksum is: $CHECKSUM"
  _login_to_github "$GITHUB_TOKEN"

  if gh release list | grep -q "$VERSION"; then
    gh release delete --yes "$VERSION"
  fi

  git tag --force "$VERSION"
  git push --tags --force
  COMMIT="$(git rev-parse HEAD | cut -c 1-7)"
  gh release create \
    --prerelease \
    --title "$VERSION" \
    --notes "$COMMIT" \
    "$VERSION" "$PACKAGE_ARCHIVE"

  _info "Updating package definition"
  PROJECT_DIRECTORY="$PWD"
  BETA_PACKAGE="$PACKAGE-$VERSION"
  PACKAGE_INDEX_BRANCH="$BETA_PACKAGE-$COMMIT"
  gh repo clone "logisparte/homebrew-beta-packages" "../homebrew-beta-packages"
  cd "../homebrew-beta-packages" || fail
  git checkout -b "$PACKAGE_INDEX_BRANCH"
  LANG=C sed \
    -e "s/\${PASCAL_CASED_PACKAGE}/$(_case_dashed_to_pascal "$BETA_PACKAGE")/g" \
    -e "s/\${RELEASE}/$VERSION/g" \
    -e "s/\${VERSION}/0.0.0-$COMMIT/g" \
    -e "s/\${CHECKSUM}/$CHECKSUM/g" \
    "$PROJECT_DIRECTORY/distribution/formula.rb" > "$BETA_PACKAGE.rb"
  git add --all
  git commit --message "x($BETA_PACKAGE): released $COMMIT"
  git push --set-upstream origin "$PACKAGE_INDEX_BRANCH"
  gh pr create --fill --base master
  _success "Pull request for $BETA_PACKAGE (commit $COMMIT) opened in package index"
}

_assemble_package_directory() {
  rm -rf "$PACKAGE_DIRECTORY"
  mkdir -p "$PACKAGE_DIRECTORY"

  cp distribution/install "$PACKAGE_DIRECTORY"
  cp distribution/uninstall "$PACKAGE_DIRECTORY"
  cp LICENSE "$PACKAGE_DIRECTORY"
  mkdir -p "$PACKAGE_DIRECTORY/share/doc"
  cp -R docs/* "$PACKAGE_DIRECTORY/share/doc"
  mkdir -p "$PACKAGE_DIRECTORY/lib"
  cp -R "$BUILD_DIRECTORY"/* "$PACKAGE_DIRECTORY/lib"
}

_archive_package_directory() {
  tar --create --gzip --file "$PACKAGE_ARCHIVE" --directory "$RELEASE_DIRECTORY" . > /dev/null
  LANG=C shasum --algorithm 256 "$PACKAGE_ARCHIVE" | cut -d " " -f 1
}

_login_to_github() {
  GITHUB_TOKEN="$1"

  if [ -z "$GITHUB_TOKEN" ]; then
    _fail "No GitHub access token provided"
  fi

  _info "Configuring git for GitHub"
  git config --global user.name helot-bot[bot]
  git config --global user.email 169493167+helot-bot[bot]@users.noreply.github.com
  git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com/"

  _info "Logging in to GitHub"
  echo "$GITHUB_TOKEN" | gh auth login --with-token
}

_case_dashed_to_pascal() {
  DASHED_CASED_STRING="$*"

  PASCAL_CASED_STRING=""
  for WORD in $(echo "$DASHED_CASED_STRING" | tr '-' ' '); do
    CAPITALIZED_FIRST_LETTER="$(echo "$WORD" | cut -c 1 | tr '[:lower:]' '[:upper:]')"
    REST_OF_WORD="$(echo "$WORD" | cut -c 2-)"
    PASCAL_CASED_STRING="${PASCAL_CASED_STRING}${CAPITALIZED_FIRST_LETTER}${REST_OF_WORD}"
  done

  echo "$PASCAL_CASED_STRING"
}

_info() {
  MESSAGE="$1"

  report info "[release] $MESSAGE"
}

_success() {
  MESSAGE="$1"

  report success "[release] $MESSAGE"
}

_fail() {
  MESSAGE="$1"

  fail "[release] $MESSAGE"
}
