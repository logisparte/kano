#!/bin/sh

Include "$SOURCE_DIRECTORY/scope_mapper"

Describe "scope_mapper"
  fail() {
    # shellcheck disable=SC2034
    fail_called_with="$*"
    %preserve fail_called_with
    exit 1
  }

  Describe "list_all_scopes_in_order"
    It "should list all scopes in order"
      When run scope_mapper list_all_scopes_in_order
      The status should be success
      The output should equal "project
user
system
builtin"
    End
  End

    Describe "list_all_scopes_in_reverse"
    It "should list all scopes in reverse"
      When run scope_mapper list_all_scopes_in_reverse
      The status should be success
      The output should equal "builtin
system
user
project"
    End
  End

  Describe "map_name_from_flag"
    Context "when flag is unknown"
      SOME_UNKNOWN_FLAG="-x"
      It "should fail with the expected error message"
        When run scope_mapper map_name_from_flag "$SOME_UNKNOWN_FLAG"
        The status should be failure
        The variable fail_called_with should equal "Invalid flag '$SOME_UNKNOWN_FLAG'"
      End
    End

    Context "when flag is -u"
      It "should return user scope"
        When run scope_mapper map_name_from_flag "-u"
        The status should be success
        The output should equal "user"
      End
    End

    Context "when flag is --user"
      It "should return user scope"
        When run scope_mapper map_name_from_flag "--user"
        The status should be success
        The output should equal "user"
      End
    End

    Context "when flag is -s"
      It "should return system scope"
        When run scope_mapper map_name_from_flag "-s"
        The status should be success
        The output should equal "system"
      End
    End

    Context "when flag is --system"
      It "should return system scope"
        When run scope_mapper map_name_from_flag "--system"
        The status should be success
        The output should equal "system"
      End
    End

    Context "when flag is -b"
      It "should return builtin scope"
        When run scope_mapper map_name_from_flag "-b"
        The status should be success
        The output should equal "builtin"
      End
    End

    Context "when flag is --builtin"
      It "should return builtin scope"
        When run scope_mapper map_name_from_flag "--builtin"
        The status should be success
        The output should equal "builtin"
      End
    End
  End

  Describe "map_directory_from_name"
    Context "when name is unknown"
      SOME_UNKNOWN_SCOPE="some_unknown_scope"
      It "should fail with the expected error message"
        When run scope_mapper map_directory_from_name "$SOME_UNKNOWN_SCOPE"
        The status should be failure
        The variable fail_called_with should equal "Invalid scope '$SOME_UNKNOWN_SCOPE'"
      End
    End

    Context "when name is project"
      It "should return project directory"
        When run scope_mapper map_directory_from_name "project"
        The status should be success
        The output should equal "$KANO_PROJECT_DIRECTORY"
      End
    End

    Context "when name is user"
      It "should return user directory"
        When run scope_mapper map_directory_from_name "user"
        The status should be success
        The output should equal "$KANO_USER_DIRECTORY"
      End
    End

    Context "when name is system"
      It "should return system directory"
        When run scope_mapper map_directory_from_name "system"
        The status should be success
        The output should equal "$KANO_SYSTEM_DIRECTORY"
      End
    End

    Context "when name is builtin"
      It "should return builtin directory"
        When run scope_mapper map_directory_from_name "builtin"
        The status should be success
        The output should equal "$KANO_BUILTIN_DIRECTORY"
      End
    End
  End
End
