#!/bin/sh

Include "$KANO_ROOT_DIRECTORY/builtin/tasks/docker"

Describe "docker"
  DEFAULT_FILE="$KANO_PROJECT_DIRECTORY/Dockerfile"
  DEFAULT_IMAGE="$KANO_PROJECT_NAME-dev"
  DEFAULT_CONTAINER="$KANO_PROJECT_NAME-dev-container"

  fail() {
    # shellcheck disable=SC2034
    fail_called_with="$*"
    %preserve fail_called_with
    exit 1
  }

  does_file_exist() {
    if [ "$1" = "$KANO_DOCKER_FILE" ]; then
      "$DOES_DOCKERFILE_EXIST"

    else
      false
    fi
  }

  does_socket_exist() {
    if [ "$1" = "$SSH_AUTH_SOCK" ]; then
      "$DOES_SSH_AUTH_SOCK_EXIST"

    else
      false
    fi
  }

  _is_docker_installed() {
    "$IS_DOCKER_INSTALLED"
  }

  _ensure_docker_daemon_is_running() {
    "$IS_DOCKER_DAEMON_RUNNING" || exit 1
  }

  _does_image_exist() {
    "$DOES_IMAGE_EXIST"
  }

  _does_container_exist() {
    "$DOES_CONTAINER_EXIST"
  }

  _is_container_running() {
    "$IS_CONTAINER_RUNNING"
  }

  _docker() {
    # shellcheck disable=SC2034
    if [ -z "$docker_called_with" ]; then
      docker_called_with="$*"

    else
      docker_called_with="$docker_called_with $*"
    fi

    %preserve docker_called_with
  }

  _shelled_docker() {
    # shellcheck disable=SC2034
    if [ -z "$shelled_docker_called_with" ]; then
      shelled_docker_called_with="$*"

    else
      shelled_docker_called_with="$shelled_docker_called_with $*"
    fi

    %preserve shelled_docker_called_with
  }

  _kano() {
    # shellcheck disable=SC2034
    if [ -z "$kano_called_with" ]; then
      kano_called_with="$*"

    else
      kano_called_with="$kano_called_with $*"
    fi

    %preserve kano_called_with
  }

  IS_DOCKER_INSTALLED=true
  IS_DOCKER_DAEMON_RUNNING=true
  DOES_DOCKERFILE_EXIST=true
  DOES_SSH_AUTH_SOCK_EXIST=false
  DOES_IMAGE_EXIST=false
  DOES_CONTAINER_EXIST=false
  IS_CONTAINER_RUNNING=false

  before_all() {
    export INITIAL_KANO_DOCKER="$KANO_DOCKER"
    export INITIAL_KANO_DOCKER_FILE="$KANO_DOCKER_FILE"
    export INITIAL_KANO_DOCKER_REGISTRY="$KANO_DOCKER_REGISTRY"
    export INITIAL_KANO_DOCKER_IMAGE="$KANO_DOCKER_IMAGE"
    export INITIAL_KANO_DOCKER_TAG="$KANO_DOCKER_TAG"
    export INITIAL_KANO_DOCKER_CONTAINER="$KANO_DOCKER_CONTAINER"
    export INITIAL_KANO_DOCKER_USER_ID="$KANO_DOCKER_USER_ID"
    export INITIAL_KANO_DOCKER_USER_NAME="$KANO_DOCKER_USER_NAME"
    export INITIAL_KANO_DOCKER_USER_HOME="$KANO_DOCKER_USER_HOME"
    export INITIAL_SSH_AUTH_SOCK="$SSH_AUTH_SOCK"
    export KANO_DOCKER=
    export KANO_DOCKER_FILE=
    export KANO_DOCKER_REGISTRY=
    export KANO_DOCKER_IMAGE=
    export KANO_DOCKER_TAG=
    export KANO_DOCKER_CONTAINER=
    export KANO_DOCKER_USER_ID=
    export KANO_DOCKER_USER_NAME=
    export KANO_DOCKER_USER_HOME=
    export SSH_AUTH_SOCK=
  }

  after_all() {
    export KANO_DOCKER="$INITIAL_KANO_DOCKER"
    export KANO_DOCKER_FILE="$INITIAL_KANO_DOCKER_FILE"
    export KANO_DOCKER_REGISTRY="$INITIAL_KANO_DOCKER_REGISTRY"
    export KANO_DOCKER_IMAGE="$INITIAL_KANO_DOCKER_IMAGE"
    export KANO_DOCKER_TAG="$INITIAL_KANO_DOCKER_TAG"
    export KANO_DOCKER_CONTAINER="$INITIAL_KANO_DOCKER_CONTAINER"
    export KANO_DOCKER_USER_ID="$INITIAL_KANO_DOCKER_USER_ID"
    export KANO_DOCKER_USER_NAME="$INITIAL_KANO_DOCKER_USER_NAME"
    export KANO_DOCKER_USER_HOME="$INITIAL_KANO_DOCKER_USER_HOME"
    export SSH_AUTH_SOCK="$INITIAL_SSH_AUTH_SOCK"
  }

  BeforeAll "before_all"
  AfterAll "after_all"

  It "has a help message"
    When run docker_help
    The status should be success
    The output should equal "Develop in a docker container"
  End

  Context "when subcommand is '_init_container'"
    Context "when not inside a container"
      It "should fail with the expected error message"
        When run docker _init_container
        The status should be failure
        The variable fail_called_with should equal \
          "Container must be initialized from inside the container"
      End
    End

    Context "when inside a container"
      KANO_DOCKER=true
      sudo() {
        "$@"
      }

      useradd() {
        # shellcheck disable=SC2034
        useradd_called_with="$*"
        %preserve useradd_called_with
      }

      passwd() {
        # shellcheck disable=SC2034
        passwd_called_with="$*"
        %preserve passwd_called_with
      }

      chown() {
        # shellcheck disable=SC2034
        chown_called_with="$*"
        %preserve chown_called_with
      }

      chmod() {
        # shellcheck disable=SC2034
        chmod_called_with="$*"
        %preserve chmod_called_with
      }

      mkdir() {
        # shellcheck disable=SC2034
        mkdir_called_with="$*"
        %preserve mkdir_called_with
      }

      touch() {
        # shellcheck disable=SC2034
        touch_called_with="$*"
        %preserve touch_called_with
      }

      export KANO_DOCKER_USER_ID="1001"
      export KANO_DOCKER_USER_NAME="some-user"
      export KANO_DOCKER_USER_HOME="/home/some-user"
      It "should create host user as passwordless sudo"
        When run docker _init_container
        The status should be success
        The variable useradd_called_with should equal "$(
          echo \
            "--uid $KANO_DOCKER_USER_ID" \
            "--gid sudo" \
            "--no-create-home" \
            "--home-dir $KANO_DOCKER_USER_HOME" \
            "$KANO_DOCKER_USER_NAME"
        )"
        The variable passwd_called_with should equal "--delete $KANO_DOCKER_USER_NAME"
        The variable chown_called_with should equal \
          "-R $KANO_DOCKER_USER_NAME $KANO_DOCKER_USER_HOME"
        The variable mkdir_called_with should equal "-p /var/kano"
        The variable touch_called_with should equal "/var/kano/kano_docker_ready"
      End

      Context "when SSH_AUTH_SOCK is not defined"
        It "should not change socket permissions"
          When run docker _init_container
          The status should be success
          The variable chmod_called_with should be undefined
        End
      End

      Context "when SSH_AUTH_SOCK is defined"
        export SSH_AUTH_SOCK="/home/some-user/some_ssh_socket.sock"
        Context "when socket does not exist"
          It "should not change socket permissions"
            When run docker _init_container
            The status should be success
            The variable chmod_called_with should be undefined
          End
        End

        Context "when socket exists"
          DOES_SSH_AUTH_SOCK_EXIST=true
          It "should change socket permissions so that everyone can read/write"
            When run docker _init_container
            The status should be success
            The variable chmod_called_with should equal "666 $SSH_AUTH_SOCK"
          End
        End
      End
    End
  End

  Context "when subcommand is '_is_container_ready'"
    Context "when not inside a container"
      It "should fail with the expected error message"
        When run docker _is_container_ready
        The status should be failure
        The variable fail_called_with should equal \
          "Container readiness must be checked from inside the container"
      End
    End

    Context "when inside a container"
      KANO_DOCKER=true
      does_file_exist() {
        if [ "$1" = "/var/kano/kano_docker_ready" ]; then
          "$DOES_KANO_DOCKER_READY_FILE_EXIST"

        else
          false
        fi
      }

      DOES_KANO_DOCKER_READY_FILE_EXIST=false

      Context "when kano_docker_container_ready file does not exist yet"
        It "should return false"
          When run docker _is_container_ready
          The status should be failure
        End
      End

      Context "when kano_docker_container_ready file exists"
        DOES_KANO_DOCKER_READY_FILE_EXIST=true
        It "should return true"
          When run docker _is_container_ready
          The status should be success
        End
      End
    End
  End

  Context "when inside a container"
    KANO_DOCKER=true
    It "should fail with the expected error message"
      When run docker some_command
      The status should be failure
      The variable fail_called_with should equal \
        "Cannot run docker task inside a development container"
    End
  End

  Context "when docker is not installed"
    IS_DOCKER_INSTALLED=false
    It "should fail with the expected error message"
      When run docker some_command
      The status should be failure
      The variable fail_called_with should equal "Docker is not installed"
    End
  End

  Context "when docker daemon is not running"
    IS_DOCKER_DAEMON_RUNNING=false
    It "should fail"
      When run docker some_command
      The status should be failure
    End
  End

  Context "when \$KANO_DOCKER_USER_ID is not defined"
    export KANO_DOCKER_USER_ID=
    Context "when user ID cannot be determined"
      id() {
        case "$1" in
          -u)
            false
            ;;

          *)
            command id "$@"
            ;;
        esac
      }

      It "should fail with the expected error message"
        When run docker container create
        The status should be failure
        The variable fail_called_with should equal \
          "Host user ID not found. Set \$KANO_DOCKER_USER_ID to fix"
      End
    End
  End

  Context "when \$KANO_DOCKER_USER_NAME is not defined"
    export KANO_DOCKER_USER_NAME=
    Context "when user name cannot be determined"
      id() {
        case "$1" in
          -un)
            false
            ;;

          *)
            command id "$@"
            ;;
        esac
      }

      It "should fail with the expected error message"
        When run docker container create
        The status should be failure
        The variable fail_called_with should equal \
          "Host user name not found. Set \$KANO_DOCKER_USER_NAME to fix"
      End
    End
  End

  Context "when \$KANO_DOCKER_USER_HOME is not defined"
    export KANO_DOCKER_USER_HOME=
    Context "when user home directory cannot be determined"
      INITIAL_HOME="$HOME"
      export HOME=
      It "should fail with the expected error message"
        When run docker container create
        The status should be failure
        The variable fail_called_with should equal \
          "Host user home directory not found. Set \$KANO_DOCKER_USER_HOME to fix"
      End

      export HOME="$INITIAL_HOME"
    End
  End

  Describe "image"
    Describe "build"
      Context "when configured tag is not 'latest'"
        export KANO_DOCKER_TAG="some-tag"
        It "should fail with the expected error message"
          When run docker image build
          The status should be failure
          # shellcheck disable=SC2116
          The variable fail_called_with should equal "$(
            echo \
              "Cannot rebuild a versioned image." \
              "Run 'kano docker pull' or unset '\$KANO_DOCKER_TAG'"
          )"
        End
      End

      Context "when Dockerfile not found"
        DOES_DOCKERFILE_EXIST=false
        It "should fail with the expected error message"
          When run docker image build
          The status should be failure
          # shellcheck disable=SC2116
          The variable fail_called_with should equal "$(
            echo \
              "No Dockerfile at '$DEFAULT_FILE'." \
              "Create one or set '\$KANO_DOCKER_FILE' to configure a different location"
          )"
        End
      End

      Context "when no registry configured"
        It "should build the image"
          When run docker image build
          The status should be success
          The variable docker_called_with should start_with "image build"
          The variable docker_called_with should include "--file $DEFAULT_FILE"
          The variable docker_called_with should include "--tag $DEFAULT_IMAGE:latest"
          The variable docker_called_with should end_with "."
        End
      End

      Context "when a registry is configured"
        export KANO_DOCKER_REGISTRY="some-registry.com"
        It "should build the image from cache"
          When run docker image build
          The status should be success
          The variable docker_called_with should start_with "image build"
          The variable docker_called_with should include "--build-arg BUILDKIT_INLINE_CACHE=1"
          The variable docker_called_with should include \
            "--cache-from $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
          The variable docker_called_with should include "--file $DEFAULT_FILE"
          The variable docker_called_with should include "--pull"
          The variable docker_called_with should include \
            "--tag $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
          The variable docker_called_with should end_with "."
        End
      End

      Context "when passing extra docker options and flags"
        It "should build the image with extra docker options and flags"
          When run docker image build \
            --some-docker-option some_value \
            --some-docker-flag
          The status should be success
          The variable docker_called_with should start_with "image build"
          The variable docker_called_with should include "--some-docker-option some_value"
          The variable docker_called_with should include "--some-docker-flag"
          The variable docker_called_with should end_with "."
        End
      End

      Context "when using custom docker file"
        SOME_CUSTOM_DOCKERFILE="/some_directory/Dockerfile"
        export KANO_DOCKER_FILE="$SOME_CUSTOM_DOCKERFILE"
        It "should build the image from custom file"
          When run docker image build
          The status should be success
          The variable docker_called_with should include "--file $SOME_CUSTOM_DOCKERFILE"
        End
      End

      Context "when using custom image name"
        SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
        export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
        It "should build the image with custom name"
          When run docker image build
          The status should be success
          The variable docker_called_with should include "--tag $SOME_CUSTOM_IMAGE_NAME:latest"
        End
      End

      Context "when registry is configured and using custom image name"
        SOME_REGISTRY="some-registry"
        export KANO_DOCKER_REGISTRY="$SOME_REGISTRY"
        SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
        export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
        It "should build the image with custom name and registry"
          When run docker image build
          The status should be success
          The variable docker_called_with should include \
            "--tag $SOME_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:latest"
        End
      End

      Context "when using shortcut form"
        It "should delegate to image subcommand"
          When run docker build
          The status should be success
          The variable kano_called_with should start_with "docker image build"
        End
      End
    End

    Describe "rm"
      Context "when image does not exist"
        It "should fail with the expected error message"
          When run docker image rm
          The status should be failure
          The variable fail_called_with should equal "Development image does not exist"
        End
      End

      Context "when image exists"
        DOES_IMAGE_EXIST=true
        It "should delete image"
          When run docker image rm
          The status should be success
          The variable docker_called_with should equal "image rm $DEFAULT_IMAGE:latest"
        End

        Context "when passing extra docker options and flags"
          It "should delete the image with extra docker options and flags"
            When run docker image rm \
              --some-docker-option some_value \
              --some-docker-flag
            The status should be success
            The variable docker_called_with should start_with "image rm"
            The variable docker_called_with should include "--some-docker-option some_value"
            The variable docker_called_with should include "--some-docker-flag"
            The variable docker_called_with should end_with "$DEFAULT_IMAGE:latest"
          End
        End

        Context "when registry is configured"
          SOME_REGISTRY="some-registry"
          export KANO_DOCKER_REGISTRY="$SOME_REGISTRY"
          It "should delete the image with registry prefix"
            When run docker image rm
            The status should be success
            The variable docker_called_with should end_with \
              "$SOME_REGISTRY/$DEFAULT_IMAGE:latest"
          End
        End

        Context "when using custom image name"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          It "should delete the image with custom name"
            When run docker image rm
            The status should be success
            The variable docker_called_with should end_with "$SOME_CUSTOM_IMAGE_NAME:latest"
          End
        End

        Context "when using specific tag"
          SOME_TAG="some-tag"
          export KANO_DOCKER_TAG="$SOME_TAG"
          It "should delete the image with specific tag"
            When run docker image rm
            The status should be success
            The variable docker_called_with should end_with "$DEFAULT_IMAGE:$SOME_TAG"
          End
        End

        Context "when registry is configred, using custom image name and a specific tag"
          SOME_REGISTRY="some-registry"
          export KANO_DOCKER_REGISTRY="$SOME_REGISTRY"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          SOME_TAG="some-tag"
          export KANO_DOCKER_TAG="$SOME_TAG"
          It "should delete the image with registry prefix, custom name and specific tag"
            When run docker image rm
            The status should be success
            The variable docker_called_with should end_with \
              "$SOME_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:$SOME_TAG"
          End
        End

        Context "when using shortcut form"
          It "should delegate to image subcommand"
            When run docker rmi
            The status should be success
            The variable kano_called_with should start_with "docker image rm"
          End
        End
      End
    End

    Describe "pull"
      Context "when no registry configured"
        It "should fail with the expected error message"
          When run docker image pull
          The status should be failure
          The variable fail_called_with should equal \
            "No container registry configured. Set '\$KANO_DOCKER_REGISTRY'"
        End
      End

      Context "when a registry is configured"
        export KANO_DOCKER_REGISTRY="some-registry.com"
        It "should pull the image"
          When run docker image pull
          The status should be success
          The variable docker_called_with should equal \
            "image pull $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
        End

        Context "when specifying a tag"
          SOME_TAG="some-tag"
          It "should pull the image with specified tag"
            When run docker image pull "$SOME_TAG"
            The status should be success
            The variable docker_called_with should equal \
              "image pull $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:$SOME_TAG"
          End
        End

        Context "when passing extra docker options and flags"
          SOME_PULL_FLAG="--quiet"
          SOME_PULL_OPTION_KEY="--platform"
          SOME_PULL_OPTION_VALUE="amd64"
          It "should pull the image with extra docker options and flags"
            When run docker image pull \
              "$SOME_PULL_FLAG" \
              "$SOME_PULL_OPTION_KEY" "$SOME_PULL_OPTION_VALUE"
            The status should be success
            The variable docker_called_with should start_with "image pull"
            The variable docker_called_with should include "$SOME_PULL_FLAG"
            The variable docker_called_with should include \
              "$SOME_PULL_OPTION_KEY $SOME_PULL_OPTION_VALUE"
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
          End
        End

        Context "when passing extra docker options and flags and specifying a tag"
          SOME_TAG="some-tag"
          SOME_PULL_FLAG="--quiet"
          SOME_PULL_OPTION_KEY="--platform"
          SOME_PULL_OPTION_VALUE="amd64"
          It "should pull the image with extra docker options and flags"
            When run docker image pull \
              "$SOME_PULL_FLAG" \
              "$SOME_PULL_OPTION_KEY" "$SOME_PULL_OPTION_VALUE" \
              "$SOME_TAG"
            The status should be success
            The variable docker_called_with should start_with "image pull"
            The variable docker_called_with should include "$SOME_PULL_FLAG"
            The variable docker_called_with should include \
              "$SOME_PULL_OPTION_KEY $SOME_PULL_OPTION_VALUE"
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:$SOME_TAG"
          End
        End

        Context "when using custom image name"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          It "should pull the image with custom name"
            When run docker image pull
            The status should be success
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:latest"
          End
        End

        Context "when using custom image name and specific tag"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          SOME_TAG="some-tag"
          It "should pull the image with custom name and specific tag"
            When run docker image pull "$SOME_TAG"
            The status should be success
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:$SOME_TAG"
          End
        End

        Context "when using shortcut form"
          It "should delegate to image subcommand"
            When run docker pull
            The status should be success
            The variable kano_called_with should start_with "docker image pull"
          End
        End
      End
    End

    Describe "push"
      Context "when no registry configured"
        It "should fail with the expected error message"
          When run docker image push
          The status should be failure
          The variable fail_called_with should equal \
            "No container registry configured. Set '\$KANO_DOCKER_REGISTRY'"
        End
      End

      Context "when a registry is configured"
        export KANO_DOCKER_REGISTRY="some-registry.com"
        It "should push the image"
          When run docker image push
          The status should be success
          The variable docker_called_with should equal \
            "image push $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
        End

        Context "when specifying a tag"
          SOME_TAG="some-tag"
          It "should push the image with specified tag"
            When run docker image push "$SOME_TAG"
            The status should be success
            The variable docker_called_with should equal \
              "image push $KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:$SOME_TAG"
          End
        End

        Context "when passing extra docker flags"
          SOME_PUSH_FLAG="--quiet"
          It "should push the image with extra docker flags"
            When run docker image push "$SOME_PUSH_FLAG"
            The status should be success
            The variable docker_called_with should start_with "image push"
            The variable docker_called_with should include "$SOME_PUSH_FLAG"
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:latest"
          End
        End

        Context "when passing extra docker flags and specifying a tag"
          SOME_TAG="some-tag"
          SOME_PUSH_FLAG="--quiet"
          It "should push the image with extra docker options and flags"
            When run docker image push "$SOME_PUSH_FLAG" "$SOME_TAG"
            The status should be success
            The variable docker_called_with should start_with "image push"
            The variable docker_called_with should include "$SOME_PUSH_FLAG"
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$DEFAULT_IMAGE:$SOME_TAG"
          End
        End

        Context "when using custom image name"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          It "should push the image with custom name"
            When run docker image push
            The status should be success
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:latest"
          End
        End

        Context "when using custom image name and specific tag"
          SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
          SOME_TAG="some-tag"
          It "should push the image with custom name and specific tag"
            When run docker image push "$SOME_TAG"
            The status should be success
            The variable docker_called_with should end_with \
              "$KANO_DOCKER_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:$SOME_TAG"
          End
        End

        Context "when using shortcut form"
          It "should delegate to image subcommand"
            When run docker push
            The status should be success
            The variable kano_called_with should start_with "docker image push"
          End
        End
      End
    End

    Describe "tag"
      Context "when no tag provided"
        It "should fail with the expected error message"
          When run docker image tag
          The status should be failure
          The variable fail_called_with should equal "No tag provided"
        End
      End

      Context "when a tag is provided"
        SOME_TAG="some-tag"
        It "should tag the image"
          When run docker image tag "$SOME_TAG"
          The status should be success
          The variable docker_called_with should equal \
            "image tag $DEFAULT_IMAGE:latest $DEFAULT_IMAGE:$SOME_TAG"
        End

        Context "when using shortcut form"
          It "should delegate to image subcommand"
            When run docker tag "$SOME_TAG"
            The status should be success
            The variable kano_called_with should start_with "docker image tag"
          End
        End
      End
    End
  End

  Describe "container"
    Describe "create"
      Context "when image does not exist"
        It "should fail with the expected error message"
          When run docker container create
          The status should be failure
          # shellcheck disable=SC2116
          The variable fail_called_with should equal "$(
            echo \
              "Development image does not exist." \
              "Run 'kano docker image build' or 'kano docker image pull'"
          )"
        End
      End

      Context "when image exists"
        DOES_IMAGE_EXIST=true
        Context "when container already exists"
          DOES_CONTAINER_EXIST=true
          It "should fail with the expected error message"
            When run docker container create
            The status should be failure
            The variable fail_called_with should equal "Development container already exists"
          End
        End

        Context "when container does not exist"
          # shellcheck disable=SC2116
          START_COMMAND="$(
            echo \
              "sudo ln -s /opt/kano/lib/kano /usr/bin/kano;" \
              "kano docker _init_container;" \
              "sh -c 'kill -STOP \$\$'"
          )"

          It "should create container"
            When run docker container create
            The status should be success
            The variable docker_called_with should start_with "container create"
            The variable docker_called_with should include "--env KANO_DOCKER=true"
            The variable docker_called_with should include "--env KANO_DOCKER_FILE"
            The variable docker_called_with should include "--env KANO_DOCKER_REGISTRY"
            The variable docker_called_with should include "--env KANO_DOCKER_IMAGE"
            The variable docker_called_with should include "--env KANO_DOCKER_TAG"
            The variable docker_called_with should include "--env KANO_DOCKER_CONTAINER"
            The variable docker_called_with should include "--env KANO_DOCKER_USER_ID"
            The variable docker_called_with should include "--env KANO_DOCKER_USER_NAME"
            The variable docker_called_with should include "--env KANO_DOCKER_USER_HOME"
            The variable docker_called_with should include "--log-driver none"
            The variable docker_called_with should include "--name $DEFAULT_CONTAINER"
            The variable docker_called_with should include "--rm"
            The variable docker_called_with should include \
              "--volume $KANO_ROOT_DIRECTORY:/opt/kano/lib"
            The variable docker_called_with should include "--volume $PWD:$PWD"
            The variable docker_called_with should include "--workdir $PWD"
            The variable docker_called_with should end_with \
              "$DEFAULT_IMAGE:latest /bin/sh -c $START_COMMAND"
          End

          Context "when passing extra docker flags and options"
            It "should create container with extra docker options and flags"
              When run docker container create \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container create"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with \
                "$DEFAULT_IMAGE:latest /bin/sh -c $START_COMMAND"
            End
          End

          Context "when registry is configured"
            SOME_REGISTRY="some-registry"
            export KANO_DOCKER_REGISTRY="$SOME_REGISTRY"
            It "should create container from image with registry prefix"
              When run docker container create
              The status should be success
              The variable docker_called_with should end_with \
                "$SOME_REGISTRY/$DEFAULT_IMAGE:latest /bin/sh -c $START_COMMAND"
            End
          End

          Context "when using custom image name"
            SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
            export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
            It "should create container from image with custom name"
              When run docker container create
              The status should be success
              The variable docker_called_with should end_with \
                "$SOME_CUSTOM_IMAGE_NAME:latest /bin/sh -c $START_COMMAND"
            End
          End

          Context "when specifying a tag"
            SOME_TAG="some-tag"
            export KANO_DOCKER_TAG="$SOME_TAG"
            It "should create container from image with specific tag"
              When run docker container create
              The status should be success
              The variable docker_called_with should end_with \
                "$DEFAULT_IMAGE:$SOME_TAG /bin/sh -c $START_COMMAND"
            End
          End

          Context "when registry is configured, using a custom image name and specifying a tag"
            SOME_REGISTRY="some-registry"
            export KANO_DOCKER_REGISTRY="$SOME_REGISTRY"
            SOME_CUSTOM_IMAGE_NAME="some-custom-image-name"
            export KANO_DOCKER_IMAGE="$SOME_CUSTOM_IMAGE_NAME"
            SOME_TAG="some-tag"
            export KANO_DOCKER_TAG="$SOME_TAG"
            It "should create container from image with registry, custom name and tag"
              When run docker container create
              The status should be success
              The variable docker_called_with should end_with \
                "$SOME_REGISTRY/$SOME_CUSTOM_IMAGE_NAME:$SOME_TAG /bin/sh -c $START_COMMAND"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should create container with custom name"
              When run docker container create
              The status should be success
              The variable docker_called_with should include \
                "--name $SOME_CUSTOM_CONTAINER_NAME"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker create
              The status should be success
              The variable kano_called_with should start_with "docker container create"
            End
          End
        End
      End
    End

    Describe "rm"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container rm
          The status should be failure
          The variable fail_called_with should equal "Development container does not exist"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should fail with the expected error message"
            When run docker container rm
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is running. Run 'kano docker container stop'"
          End
        End

        Context "when container is not running"
          It "should delete container"
            When run docker container rm
            The status should be success
            The variable docker_called_with should include "container rm $DEFAULT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should delete container with extra docker options and flags"
              When run docker container rm \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container rm"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with "$DEFAULT_CONTAINER"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should delete container with custom name"
              When run docker container rm
              The status should be success
              The variable docker_called_with should end_with "$SOME_CUSTOM_CONTAINER_NAME"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker rm
              The status should be success
              The variable kano_called_with should start_with "docker container rm"
            End
          End
        End
      End
    End

    Describe "start"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container start
          The status should be failure
          The variable fail_called_with should equal \
            "Development container does not exist. Run 'kano docker container create'"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should fail with the expected error message"
            When run docker container start
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is already running"
          End
        End

        Context "when container is not running"
          It "should start container"
            When run docker container start
            The status should be success
            The variable docker_called_with should start_with \
              "container start $DEFAULT_CONTAINER"
          End

          # shellcheck disable=SC2116
          IS_CONTAINER_READY_COMMAND="$(
            echo \
              "container exec $DEFAULT_CONTAINER kano docker _is_container_ready"
          )"

          It "should check if container is initialized"
            When run docker container start
            The status should be success
            The variable shelled_docker_called_with should include "$IS_CONTAINER_READY_COMMAND"
          End

          Context "when container is not immediately initialized"
            IS_CONTAINER_READY_CALL_COUNT=0
            CONTAINER_READY_CALL_NUMBER=1
            _shelled_docker() {
              if [ "$*" = "$IS_CONTAINER_READY_COMMAND" ]; then
                IS_CONTAINER_READY_CALL_COUNT=$((IS_CONTAINER_READY_CALL_COUNT + 1))
                %preserve IS_CONTAINER_READY_CALL_COUNT
                [ $CONTAINER_READY_CALL_NUMBER -eq $IS_CONTAINER_READY_CALL_COUNT ]
                return $?
              fi

              true
            }

            sleep() {
              true
            }

            Context "when container will be initialized after 5 seconds"
              CONTAINER_READY_CALL_NUMBER=5
              It "should wait for it to be initialized"
                When run docker container start
                The status should be success
                The variable IS_CONTAINER_READY_CALL_COUNT should equal 5
              End
            End

            Context "when container is still not initialized after 30 seconds"
              CONTAINER_READY_CALL_NUMBER=31
              It "should fail with the expected error message"
                When run docker container start
                The status should be failure
                The variable fail_called_with should equal \
                  "Development container could not initialize correctly"
              End
            End
          End

          Context "when passing extra docker flags and options"
            It "should start container with extra docker options and flags"
              When run docker container start \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              # shellcheck disable=SC2116
              The variable docker_called_with should start_with "$(
                echo \
                  "container start" \
                  "--some-docker-option some_value" \
                  "--some-docker-flag" \
                  "$DEFAULT_CONTAINER"
              )"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should start container with custom name"
              When run docker container start
              The status should be success
              The variable docker_called_with should start_with \
                "container start $SOME_CUSTOM_CONTAINER_NAME"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker start
              The status should be success
              The variable kano_called_with should start_with "docker container start"
            End
          End
        End
      End
    End

    Describe "stop"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container stop
          The status should be failure
          The variable fail_called_with should equal "Development container does not exist"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should fail with the expected error message"
            When run docker container stop
            The status should be failure
            The variable fail_called_with should equal "Development container is not running"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should stop container"
            When run docker container stop
            The status should be success
            The variable docker_called_with should equal "container stop $DEFAULT_CONTAINER"
          End

          It "should wait for container to be stopped"
            When run docker container stop
            The status should be success
            The variable shelled_docker_called_with should equal \
              "container wait $DEFAULT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should stop container with extra docker options and flags"
              When run docker container stop \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              # shellcheck disable=SC2116
              The variable docker_called_with should equal "$(
                echo \
                  "container stop" \
                    "--some-docker-option some_value" \
                    "--some-docker-flag" \
                    "$DEFAULT_CONTAINER"
              )"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should stop container with custom name"
              When run docker container stop
              The status should be success
              The variable docker_called_with should equal \
                "container stop $SOME_CUSTOM_CONTAINER_NAME"
            End

            It "should wait for container with custom name to be stopped"
              When run docker container stop
              The status should be success
              The variable shelled_docker_called_with should equal \
                "container wait $SOME_CUSTOM_CONTAINER_NAME"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker stop
              The status should be success
              The variable kano_called_with should start_with "docker container stop"
            End
          End
        End
      End
    End

    Describe "kill"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container 'kill'
          The status should be failure
          The variable fail_called_with should equal "Development container does not exist"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should fail with the expected error message"
            When run docker container 'kill'
            The status should be failure
            The variable fail_called_with should equal "Development container is not running"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should kill container"
            When run docker container 'kill'
            The status should be success
            The variable docker_called_with should equal "container kill $DEFAULT_CONTAINER"
          End

          It "should wait for container to be killed"
            When run docker container 'kill'
            The status should be success
            The variable shelled_docker_called_with should equal \
              "container wait $DEFAULT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should kill container with extra docker options and flags"
              When run docker container 'kill' \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              # shellcheck disable=SC2116
              The variable docker_called_with should equal "$(
                echo \
                  "container kill" \
                    "--some-docker-option some_value" \
                    "--some-docker-flag" \
                    "$DEFAULT_CONTAINER"
              )"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should kill container with custom name"
              When run docker container 'kill'
              The status should be success
              The variable docker_called_with should equal \
                "container kill $SOME_CUSTOM_CONTAINER_NAME"
            End

            It "should wait for container with custom name to be killed"
              When run docker container 'kill'
              The status should be success
              The variable shelled_docker_called_with should equal \
                "container wait $SOME_CUSTOM_CONTAINER_NAME"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker 'kill'
              The status should be success
              The variable kano_called_with should start_with "docker container kill"
            End
          End
        End
      End
    End

    Describe "exec"
      SOME_COMMAND="some_command"
      SOME_PARAMETER="some_parameter"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container 'exec' "$SOME_COMMAND" "$SOME_PARAMETER"
          The status should be failure
          The variable fail_called_with should equal \
            "Development container does not exist. Run 'kano docker container create'"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should fail with the expected error message"
            When run docker container 'exec' "$SOME_COMMAND" "$SOME_PARAMETER"
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is not running. Run 'kano docker container start'"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should exec command"
            When run docker container 'exec' "$SOME_COMMAND" "$SOME_PARAMETER"
            The status should be success
            The variable docker_called_with should start_with "container exec"
            The variable docker_called_with should include "--user $(id -un)"
            The variable docker_called_with should include "--workdir $PWD"
            The variable docker_called_with should end_with \
              "$DEFAULT_CONTAINER $SOME_COMMAND $SOME_PARAMETER"
          End

           Context "when passing extra docker flags and options"
            SOME_EXEC_FLAG="--tty"
            SOME_EXEC_OPTION_KEY="--env"
            SOME_EXEC_OPTION_VALUE="SOME_ENV"
            It "should exec command with extra docker options and flags"
              When run docker container 'exec' \
                "$SOME_EXEC_FLAG" \
                "$SOME_EXEC_OPTION_KEY" "$SOME_EXEC_OPTION_VALUE" \
                "$SOME_COMMAND" "$SOME_PARAMETER"
              The status should be success
              The variable docker_called_with should start_with "container exec"
              The variable docker_called_with should include "$SOME_EXEC_FLAG"
              The variable docker_called_with should include \
                "$SOME_EXEC_OPTION_KEY $SOME_EXEC_OPTION_VALUE"
              The variable docker_called_with should end_with \
                "$DEFAULT_CONTAINER $SOME_COMMAND $SOME_PARAMETER"
            End
          End

          Context "when using custom container name"
            SOME_CUSTOM_CONTAINER_NAME="some-custom-container-name"
            export KANO_DOCKER_CONTAINER="$SOME_CUSTOM_CONTAINER_NAME"
            It "should exec command in container with custom name"
              When run docker container 'exec' "$SOME_COMMAND" "$SOME_PARAMETER"
              The status should be success
              The variable docker_called_with should end_with \
                "$SOME_CUSTOM_CONTAINER_NAME $SOME_COMMAND $SOME_PARAMETER"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker 'exec'
              The status should be success
              The variable kano_called_with should start_with "docker container exec"
            End
          End
        End
      End
    End
  End

  Describe "boot"
    Context "when image does not exist"
      Context "when KANO_DOCKER_TAG is latest"
        It "should build image, create container and start container"
          When run docker boot
          The status should be success
          # shellcheck disable=SC2116
          The variable kano_called_with should equal "$(
            echo \
              "docker image build" \
              "docker container create" \
              "docker container start"
          )"
        End
      End

      Context "when KANO_DOCKER_TAG is not latest"
        export KANO_DOCKER_TAG="some-tag"
        It "should pull image, create container and start container"
          When run docker boot
          The status should be success
          # shellcheck disable=SC2116
          The variable kano_called_with should equal "$(
            echo \
              "docker image pull" \
              "docker container create" \
              "docker container start"
          )"
        End
      End
    End

    Context "when image exists"
      DOES_IMAGE_EXIST=true
      Context "when container does not exist"
        It "should create container and start container"
          When run docker boot
          The status should be success
          # shellcheck disable=SC2116
          The variable kano_called_with should equal "$(
            echo \
              "docker container create" \
              "docker container start"
          )"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should start container"
            When run docker boot
            The status should be success
            The variable kano_called_with should equal "docker container start"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should do nothing"
            When run docker boot
            The status should be success
            The variable kano_called_with should be undefined
          End
        End
      End
    End
  End

  Describe "execute"
    SOME_COMMAND="some_command"
    SOME_PARAMETER="some_parameter"
    It "should boot and exec command"
      When run docker execute "$SOME_COMMAND" "$SOME_PARAMETER"
      The status should be success
      # shellcheck disable=SC2116
      The variable kano_called_with should equal "$(
        echo \
          "docker boot" \
          "docker container exec_ $SOME_COMMAND" "$SOME_PARAMETER" \
      )"
    End
  End

  Describe "shell"
    Context "when \$SHELL is not defined"
      export SHELL=
      It "exececute sh"
        When run docker shell
        The status should be success
        The variable kano_called_with should equal \
          "docker execute --interactive --tty /bin/sh --login"
      End
    End

    Context "when \$SHELL is defined"
      SOME_SHELL="some_shell"
      export SHELL="$SOME_SHELL"
      It "exececute same shell as host's"
        When run docker shell
        The status should be success
        The variable kano_called_with should equal \
          "docker execute --interactive --tty $SOME_SHELL --login"
      End
    End
  End

  Describe "clean"
    Context "when image does not exist"
      It "should do nothing"
        When run docker clean
        The status should be success
        The variable kano_called_with should be undefined
      End
    End

    Context "when image exists"
      DOES_IMAGE_EXIST=true
      Context "when container does not exist"
        It "should delete image"
          When run docker clean
          The status should be success
          The variable kano_called_with should equal "docker image rm"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should delete container and delete image"
            When run docker clean
            The status should be success
            # shellcheck disable=SC2116
            The variable kano_called_with should equal "$(
              echo \
                "docker container rm" \
                "docker image rm" \
            )"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should kill container, delete container and delete image"
            When run docker clean
            The status should be success
            # shellcheck disable=SC2116
            The variable kano_called_with should equal "$(
              echo \
                "docker container kill" \
                "docker container rm" \
                "docker image rm" \
            )"
          End
        End
      End
    End
  End
End
