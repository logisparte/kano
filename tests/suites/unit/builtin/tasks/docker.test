#!/bin/sh

Include "$KANO_SOURCE_DIRECTORY/builtin/tasks/docker"

DEVELOPMENT_IMAGE="$KANO_PROJECT_NAME-dev"
DEVELOPMENT_CONTAINER="$KANO_PROJECT_NAME-dev-container"

Describe "docker"
  fail() {
    # shellcheck disable=SC2034
    fail_called_with="$*"
    %preserve fail_called_with
    exit 1
  }

  does_directory_exist() {
    if [ "$1" = "$KANO_PROJECT_DIRECTORY" ]; then
      "$DOES_PROJECT_DIRECTORY_EXIST"

    else
      false
    fi
  }

  does_file_exist() {
    if [ "$1" = "$KANO_PROJECT_DIRECTORY/Dockerfile" ]; then
      "$DOES_DOCKERFILE_EXIST"

    else
      false
    fi
  }

  _is_docker_installed() {
    "$IS_DOCKER_INSTALLED"
  }

  _ensure_docker_daemon_is_running() {
    "$IS_DOCKER_DAEMON_RUNNING" || exit 1
  }

  _does_image_exist() {
    "$DOES_IMAGE_EXIST"
  }

  _does_container_exist() {
    "$DOES_CONTAINER_EXIST"
  }

  _is_container_running() {
    "$IS_CONTAINER_RUNNING"
  }

  _docker() {
    # shellcheck disable=SC2034
    if [ -z "$kano_called_with" ]; then
      docker_called_with="$*"

    else
      docker_called_with="$docker_called_with $*"
    fi

    %preserve docker_called_with
  }

  _kano() {
    # shellcheck disable=SC2034
    if [ -z "$kano_called_with" ]; then
      kano_called_with="$*"

    else
      kano_called_with="$kano_called_with $*"
    fi

    %preserve kano_called_with
  }

  IS_DOCKER_INSTALLED=true
  IS_DOCKER_DAEMON_RUNNING=true
  DOES_PROJECT_DIRECTORY_EXIST=true
  DOES_DOCKERFILE_EXIST=true
  DOES_IMAGE_EXIST=false
  DOES_CONTAINER_EXIST=false
  IS_CONTAINER_RUNNING=false

  before_all() {
    export INITIAL_KANO_DOCKER_IMAGE="$KANO_DOCKER_IMAGE"
    export INITIAL_KANO_DOCKER_CONTAINER="$KANO_DOCKER_CONTAINER"
    export INITIAL_KANO_DOCKER="$KANO_DOCKER"
    export KANO_DOCKER_IMAGE=""
    export KANO_DOCKER_CONTAINER=""
    export KANO_DOCKER=false
  }

  after_all() {
    export KANO_DOCKER_IMAGE="$INITIAL_KANO_DOCKER_IMAGE"
    export KANO_DOCKER_CONTAINER="$INITIAL_KANO_DOCKER_CONTAINER"
    export KANO_DOCKER="$INITIAL_KANO_DOCKER"
  }

  BeforeAll "before_all"
  AfterAll "after_all"

  It "has a help message"
    When run docker_help
    The status should be success
    The output should equal "Develop in a docker container"
  End

  Context "when inside a container"
    KANO_DOCKER=true
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal \
        "Cannot run docker task inside a development container"
    End
  End

  Context "when docker is not installed"
    IS_DOCKER_INSTALLED=false
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal "Docker is not installed"
    End
  End

  Context "when docker daemon is not running"
    IS_DOCKER_DAEMON_RUNNING=false
    It "should fail"
      When run docker
      The status should be failure
    End
  End

  Describe "image"
    Describe "build"
      Context "when project kano directory does not exist"
        DOES_PROJECT_DIRECTORY_EXIST=false
        It "should fail with the expected error message"
          When run docker image build
          The status should be failure
          The variable fail_called_with should equal "No kano directory exists in project"
        End
      End

      Context "when no Dockerfile in project kano directory"
        DOES_DOCKERFILE_EXIST=false
        It "should fail with the expected error message"
          When run docker image build
          The status should be failure
          The variable fail_called_with should equal "No Dockerfile in project kano directory"
        End
      End

      It "should build the image"
        When run docker image build
        The status should be success
        The variable docker_called_with should start_with "image build"
        The variable docker_called_with should include \
          "--file $KANO_PROJECT_DIRECTORY/Dockerfile"
        The variable docker_called_with should include "--tag $DEVELOPMENT_IMAGE"
        The variable docker_called_with should end_with "."
      End

      Context "when using a custom image name"
        SOME_CUSTOM_NAME="some-custom-name"
        before_each() {
          export KANO_DOCKER_IMAGE="$SOME_CUSTOM_NAME"
        }

        after_each() {
          export KANO_DOCKER_IMAGE=""
        }

        BeforeEach "before_each"
        AfterEach "after_each"
        It "should build image with custom name"
          When run docker image build
          The status should be success
          The variable docker_called_with should include "--tag $SOME_CUSTOM_NAME"
        End
      End

      Context "when image already exist"
        DOES_IMAGE_EXIST=true
        It "should build image from cache"
          When run docker image build
          The status should be success
          The variable docker_called_with should include "--cache-from $DEVELOPMENT_IMAGE"
        End
      End

      Context "when passing extra docker options and flags"
        It "should build the image with extra docker options and flags"
          When run docker image build \
            --some-docker-option some_value \
            --some-docker-flag
          The status should be success
          The variable docker_called_with should start_with "image build"
          The variable docker_called_with should include "--some-docker-option some_value"
          The variable docker_called_with should include "--some-docker-flag"
          The variable docker_called_with should end_with "."
        End
      End

      Context "when using shortcut form"
        It "should delegate to image subcommand"
          When run docker build
          The status should be success
          The variable docker_called_with should start_with "image build"
        End
      End
    End

    Describe "rm"
      Context "when image does not exist"
        It "should fail with the expected error message"
          When run docker image rm
          The status should be failure
          The variable fail_called_with should equal "Development image does not exist"
        End
      End

      Context "when image exists"
        DOES_IMAGE_EXIST=true
        It "should delete image"
          When run docker image rm
          The status should be success
          The variable docker_called_with should include "image rm $DEVELOPMENT_IMAGE"
        End

        Context "when passing extra docker options and flags"
          It "should delete the image with extra docker options and flags"
            When run docker image rm \
              --some-docker-option some_value \
              --some-docker-flag
            The status should be success
            The variable docker_called_with should start_with "image rm"
            The variable docker_called_with should include "--some-docker-option some_value"
            The variable docker_called_with should include "--some-docker-flag"
            The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE"
          End
        End

        Context "when using shortcut form"
          It "should delegate to image subcommand"
            When run docker rmi
            The status should be success
            The variable docker_called_with should start_with "image rm"
          End
        End
      End
    End
  End

  Describe "container"
    Describe "create"
      Context "when image does not exist"
        It "should fail with the expected error message"
          When run docker container create
          The status should be failure
          The variable fail_called_with should equal \
            "Development image does not exist. Run 'kano docker image build'"
        End
      End

      Context "when image exists"
        DOES_IMAGE_EXIST=true
        Context "when container already exists"
          DOES_CONTAINER_EXIST=true
          It "should fail with the expected error message"
            When run docker container create
            The status should be failure
            The variable fail_called_with should equal "Development container already exists"
          End
        End

        Context "when container does not exist"
          START_COMMAND="/bin/sh -c \
sudo useradd --uid $(id -u) --gid sudo --no-create-home --home-dir $HOME $(id -un); \
sudo passwd --delete $(id -un) > /dev/null; \
sudo chown -R $(id -un) $HOME; \
sh -c 'kill -STOP \$\$'"

          It "should create container"
            When run docker container create
            The status should be success
            The variable docker_called_with should start_with "container create"
            The variable docker_called_with should include "--env KANO_DOCKER=true"
            The variable docker_called_with should include "--env KANO_DOCKER_IMAGE"
            The variable docker_called_with should include "--env KANO_DOCKER_CONTAINER"
            The variable docker_called_with should include "--log-driver none"
            The variable docker_called_with should include "--name $KANO_DOCKER_CONTAINER"
            The variable docker_called_with should include "--rm"
            The variable docker_called_with should include "--volume $PWD:$PWD"
            The variable docker_called_with should include "--workdir $PWD"
            The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE $START_COMMAND"
          End

          Context "when passing extra docker flags and options"
            It "should create container with extra docker options and flags"
              When run docker container create \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container create"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with \
                "$DEVELOPMENT_IMAGE $START_COMMAND"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker create
              The status should be success
              The variable docker_called_with should start_with "container create"
            End
          End
        End
      End
    End

    Describe "rm"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container rm
          The status should be failure
          The variable fail_called_with should equal "Development container does not exist"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should fail with the expected error message"
            When run docker container rm
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is running. Run 'kano docker container stop'"
          End
        End

        Context "when container is not running"
          It "should delete container"
            When run docker container rm
            The status should be success
            The variable docker_called_with should include "container rm $DEVELOPMENT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should delete container with extra docker options and flags"
              When run docker container rm \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container rm"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with "$DEVELOPMENT_CONTAINER"
            End
          End


          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker rm
              The status should be success
              The variable docker_called_with should start_with "container rm"
            End
          End
        End
      End
    End

    Describe "start"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container start
          The status should be failure
          The variable fail_called_with should equal \
            "Development container does not exist. Run 'kano docker container create'"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should fail with the expected error message"
            When run docker container start
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is already running"
          End
        End

        Context "when container is not running"
          It "should start container"
            When run docker container start
            The status should be success
            The variable docker_called_with should equal \
              "container start $DEVELOPMENT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should start container with extra docker options and flags"
              When run docker container start \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container start"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with "$DEVELOPMENT_CONTAINER"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker start
              The status should be success
              The variable docker_called_with should start_with "container start"
            End
          End
        End
      End
    End

    Describe "stop"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container stop
          The status should be failure
          The variable fail_called_with should equal "Development container does not exist"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should fail with the expected error message"
            When run docker container stop
            The status should be failure
            The variable fail_called_with should equal "Development container is not running"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should stop container"
            When run docker container stop
            The status should be success
            The variable docker_called_with should equal \
              "container stop $DEVELOPMENT_CONTAINER"
          End

          Context "when passing extra docker flags and options"
            It "should stop container with extra docker options and flags"
              When run docker container stop \
                --some-docker-option some_value \
                --some-docker-flag
              The status should be success
              The variable docker_called_with should start_with "container stop"
              The variable docker_called_with should include "--some-docker-option some_value"
              The variable docker_called_with should include "--some-docker-flag"
              The variable docker_called_with should end_with "$DEVELOPMENT_CONTAINER"
            End
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker stop
              The status should be success
              The variable docker_called_with should start_with "container stop"
            End
          End
        End
      End
    End

    Describe "exec"
      SOME_COMMAND="some_command"
      Context "when container does not exist"
        It "should fail with the expected error message"
          When run docker container 'exec' "$SOME_COMMAND"
          The status should be failure
          The variable fail_called_with should equal \
            "Development container does not exist. Run 'kano docker container create'"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should fail with the expected error message"
            When run docker container 'exec' "$SOME_COMMAND"
            The status should be failure
            The variable fail_called_with should equal \
              "Development container is not running. Run 'kano docker container start'"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should exec command"
            When run docker container 'exec' "$SOME_COMMAND"
            The status should be success
            The variable docker_called_with should start_with "container exec"
            The variable docker_called_with should include "--user $(id -un)"
            The variable docker_called_with should include "--workdir $PWD"
            The variable docker_called_with should end_with \
              "$DEVELOPMENT_CONTAINER $SOME_COMMAND"
          End

          Context "when using shortcut form"
            It "should delegate to container subcommand"
              When run docker 'exec'
              The status should be success
              The variable docker_called_with should start_with "container exec"
            End
          End
        End
      End
    End
  End

  Describe "execute"
    Context "when image does not exist"
      It "should build image, create container, start container and exec command"
        When run docker execute "$SOME_COMMAND"
        The status should be success
        The variable kano_called_with should equal "\
docker image build \
docker container create \
docker container start \
docker container exec_ $SOME_COMMAND"
      End
    End

    Context "when image exists"
      DOES_IMAGE_EXIST=true
      Context "when container does not exist"
        It "should create container, start container and exec command"
          When run docker execute "$SOME_COMMAND"
          The status should be success
          The variable kano_called_with should equal "\
docker container create \
docker container start \
docker container exec_ $SOME_COMMAND"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should start container and exec command"
            When run docker execute "$SOME_COMMAND"
            The status should be success
            The variable kano_called_with should equal "\
docker container start \
docker container exec_ $SOME_COMMAND"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should exec command"
            When run docker execute "$SOME_COMMAND"
            The status should be success
            The variable kano_called_with should equal "\
docker container exec_ $SOME_COMMAND"
          End
        End
      End
    End
  End

  Describe "shell"
    Context "when image does not exist"
      It "should build image, create container, start container and exec same shell as host's"
        When run docker shell
        The status should be success
        The variable kano_called_with should equal "\
docker image build \
docker container create \
docker container start \
docker container exec_ --interactive --tty $SHELL --login"
      End
    End

    Context "when image exists"
      DOES_IMAGE_EXIST=true
      Context "when container does not exist"
        It "should create container, start container and exec same shell as host's"
          When run docker shell
          The status should be success
          The variable kano_called_with should equal "\
docker container create \
docker container start \
docker container exec_ --interactive --tty $SHELL --login"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should start container and exec same shell as host's"
            When run docker shell
            The status should be success
            The variable kano_called_with should equal "\
docker container start \
docker container exec_ --interactive --tty $SHELL --login"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should exec same shell as host's"
            When run docker shell
            The status should be success
            The variable kano_called_with should equal "\
docker container exec_ --interactive --tty $SHELL --login"
          End
        End
      End
    End
  End

  Describe "clean"
    Context "when image does not exist"
      It "should do nothing"
        When run docker clean
        The status should be success
        The variable kano_called_with should be undefined
      End
    End

    Context "when image exists"
      DOES_IMAGE_EXIST=true
      Context "when container does not exist"
        It "should delete image"
          When run docker clean
          The status should be success
          The variable kano_called_with should equal "docker image rm"
        End
      End

      Context "when container exists"
        DOES_CONTAINER_EXIST=true
        Context "when container is not running"
          It "should delete container and delete image"
            When run docker clean
            The status should be success
            The variable kano_called_with should equal "\
docker container rm \
docker image rm"
          End
        End

        Context "when container is running"
          IS_CONTAINER_RUNNING=true
          It "should stop container, delete container and delete image"
            When run docker clean
            The status should be success
            The variable kano_called_with should equal "\
docker container stop \
docker container rm \
docker image rm"
          End
        End
      End
    End
  End
End
