#!/bin/sh

Include "$KANO_SOURCE_DIRECTORY/builtin/tasks/docker"

DEVELOPMENT_IMAGE="$KANO_PROJECT_NAME-dev"
DEVELOPMENT_CONTAINER="$KANO_PROJECT_NAME-dev-container"

Describe "docker"
  fail() {
    # shellcheck disable=SC2034
    fail_called_with="$*"
    %preserve fail_called_with
    exit 1
  }

  does_directory_exist() {
    if [ "$1" = "$KANO_PROJECT_DIRECTORY" ]; then
      "$DOES_PROJECT_DIRECTORY_EXIST"

    else
      false
    fi
  }

  does_file_exist() {
    if [ "$1" = "$KANO_PROJECT_DIRECTORY/Dockerfile" ]; then
      "$DOES_DOCKERFILE_EXIST"

    else
      false
    fi
  }

  _is_inside_development_container() {
    "$IS_INSIDE_DEVELOPMENT_CONTAINER"
  }

  _is_docker_installed() {
    "$IS_DOCKER_INSTALLED"
  }

  _does_development_image_exist() {
    "$DOES_DEVELOPMENT_IMAGE_EXIST"
  }

  _does_development_container_exist() {
    "$DOES_DEVELOPMENT_CONTAINER_EXIST"
  }

  _docker() {
    # shellcheck disable=SC2034
    docker_called_with="$*"
    %preserve docker_called_with
  }

  IS_INSIDE_DEVELOPMENT_CONTAINER=false
  IS_DOCKER_INSTALLED=true
  DOES_PROJECT_DIRECTORY_EXIST=true
  DOES_DOCKERFILE_EXIST=true
  DOES_DEVELOPMENT_IMAGE_EXIST=false
  DOES_DEVELOPMENT_CONTAINER_EXIST=false

  before_all() {
    export INITIAL_KANO_DEVELOPMENT_IMAGE="$KANO_DEVELOPMENT_IMAGE"
    export INITIAL_KANO_DEVELOPMENT_CONTAINER="$KANO_DEVELOPMENT_CONTAINER"
    export KANO_DEVELOPMENT_IMAGE=""
    export KANO_DEVELOPMENT_CONTAINER=""
  }

  after_all() {
    export KANO_DEVELOPMENT_IMAGE="$INITIAL_KANO_DEVELOPMENT_IMAGE"
    export KANO_DEVELOPMENT_CONTAINER="$INITIAL_KANO_DEVELOPMENT_CONTAINER"
  }

  BeforeAll "before_all"
  AfterAll "after_all"

  Context "when inside a development container"
    IS_INSIDE_DEVELOPMENT_CONTAINER=true
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal \
        "Cannot run docker task inside a development container"
    End
  End

  Context "when docker is not installed"
    IS_DOCKER_INSTALLED=false
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal "Docker is not installed"
    End
  End

  Context "when project kano directory does not exist"
    DOES_PROJECT_DIRECTORY_EXIST=false
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal "No kano directory exists in project"
    End
  End

  Context "when no Dockerfile in project kano directory"
    DOES_DOCKERFILE_EXIST=false
    It "should fail with the expected error message"
      When run docker
      The status should be failure
      The variable fail_called_with should equal "No Dockerfile in project kano directory"
    End
  End

  Describe "build"
    It "should build the development image"
      When run docker build
      The status should be success
      The variable docker_called_with should start_with "build"
      The variable docker_called_with should include \
        "--file $KANO_PROJECT_DIRECTORY/Dockerfile"
      The variable docker_called_with should include "--tag $DEVELOPMENT_IMAGE"
      The variable docker_called_with should end_with "."
    End

    Context "when using a custom image name"
      SOME_CUSTOM_NAME="some-custom-name"
      before_each() {
        export KANO_DEVELOPMENT_IMAGE="$SOME_CUSTOM_NAME"
      }

      after_each() {
        export KANO_DEVELOPMENT_IMAGE=""
      }

      BeforeEach "before_each"
      AfterEach "after_each"
      It "should build it with custom name"
        When run docker build
        The status should be success
        The variable docker_called_with should include "--tag $SOME_CUSTOM_NAME"
      End
    End

    Context "when development image already exist"
      DOES_DEVELOPMENT_IMAGE_EXIST=true
      It "should build it from cache"
        When run docker build
        The status should be success
        The variable docker_called_with should include "--cache-from $DEVELOPMENT_IMAGE"
      End
    End

    Context "when passing extra docker build arguments"
      It "should build the development image with extra arguments"
        When run docker build --build-arg some_argument=some_argument
        The status should be success
        The variable docker_called_with should start_with "build"
        The variable docker_called_with should include \
          "--file $KANO_PROJECT_DIRECTORY/Dockerfile"
        The variable docker_called_with should include "--tag $DEVELOPMENT_IMAGE"
        The variable docker_called_with should include \
          "--build-arg some_argument=some_argument"
        The variable docker_called_with should end_with "."
      End
    End
  End

  Describe "delete"
    Context "when development image does not exist"
      It "should not invoke docker"
        When run docker delete
        The status should be success
        The variable docker_called_with should be undefined
      End
    End

    Context "when development image exists"
      DOES_DEVELOPMENT_IMAGE_EXIST=true
      It "should delete it"
        When run docker delete
        The status should be success
        The variable docker_called_with should include "image rm $DEVELOPMENT_IMAGE"
      End
    End
  End

  Describe "run"
    Context "when development image does not exist"
      It "should fail with the expected error message"
        When run docker run some_command
        The status should be failure
        The variable fail_called_with should equal \
          "Development image does not exist. Run 'kano docker build'"
      End
    End

    Context "when development image exists"
      DOES_DEVELOPMENT_IMAGE_EXIST=true
      It "should run command in container"
        When run docker run some_command
        The status should be success
        The variable docker_called_with should start_with "run"
        The variable docker_called_with should include "--interactive"
        The variable docker_called_with should include "--log-driver none"
        The variable docker_called_with should include "--rm"
        The variable docker_called_with should include "--tty"
        The variable docker_called_with should include "--volume $PWD:$PWD"
        The variable docker_called_with should include "--workdir $PWD"
        The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE some_command"
      End

      Context "when passing extra docker run options"
        It "should run command in container with extra arguments"
          When run docker run \
            --some-docker-run-option some_value \
            some_command --some-command-option
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--some-docker-run-option some_value"
          The variable docker_called_with should end_with \
            "$DEVELOPMENT_IMAGE some_command --some-command-option"
        End
      End

      Context "when passing extra docker run flags"
        It "should run command in container with extra flags"
          When run docker run \
            --disable-content-trust \
            some_command --some-command-option
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--disable-content-trust"
          The variable docker_called_with should end_with \
            "$DEVELOPMENT_IMAGE some_command --some-command-option"
        End
      End

      Context "when passing extra docker run flags and options"
        It "should run command in container with extra flags"
          When run docker run \
            --disable-content-trust \
            --some-docker-run-option some_value \
            --some-docker-other-run-option some_value \
            --detach \
            some_command --some-command-option
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--disable-content-trust"
          The variable docker_called_with should include "--some-docker-run-option some_value"
          The variable docker_called_with should include \
            "--some-docker-other-run-option some_value"
          The variable docker_called_with should include "--detach"
          The variable docker_called_with should end_with \
            "$DEVELOPMENT_IMAGE some_command --some-command-option"
        End
      End
    End
  End

  Describe "start"
    Context "when development image does not exist"
      It "should fail with the expected error message"
        When run docker start
        The status should be failure
        The variable fail_called_with should equal \
          "Development image does not exist. Run 'kano docker build'"
      End
    End

    Context "when development image exists"
      DOES_DEVELOPMENT_IMAGE_EXIST=true
      It "should start container"
        When run docker start
        The status should be success
        The variable docker_called_with should start_with "run"
        The variable docker_called_with should include "--detach"
        The variable docker_called_with should include "--interactive"
        The variable docker_called_with should include "--log-driver none"
        The variable docker_called_with should include "--name $DEVELOPMENT_CONTAINER"
        The variable docker_called_with should include "--rm"
        The variable docker_called_with should include "--tty"
        The variable docker_called_with should include "--volume $PWD:$PWD"
        The variable docker_called_with should include "--workdir $PWD"
        The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE"
      End

      Context "when using a custom container name"
        SOME_CUSTOM_NAME="some-custom-container-name"
        before_each() {
          export KANO_DEVELOPMENT_CONTAINER="$SOME_CUSTOM_NAME"
        }

        after_each() {
          export KANO_DEVELOPMENT_CONTAINER=""
        }

        BeforeEach "before_each"
        AfterEach "after_each"
        It "should start it with custom name"
          When run docker start
          The status should be success
          The variable docker_called_with should include "--name $SOME_CUSTOM_NAME"
        End
      End

      Context "when passing extra docker run options"
        It "should run command in container with extra arguments"
          When run docker start --some-docker-run-option some_value
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--some-docker-run-option some_value"
          The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE"
        End
      End

      Context "when passing extra docker run flags"
        It "should run command in container with extra flags"
          When run docker start --disable-content-trust
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--disable-content-trust"
          The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE"
        End
      End

      Context "when passing extra docker run flags and options"
        It "should run command in container with extra flags"
          When run docker start \
            --disable-content-trust \
            --some-docker-run-option some_value \
            --some-docker-other-run-option some_value \
          The status should be success
          The variable docker_called_with should start_with "run"
          The variable docker_called_with should include "--disable-content-trust"
          The variable docker_called_with should include "--some-docker-run-option some_value"
          The variable docker_called_with should include \
            "--some-docker-other-run-option some_value"
          The variable docker_called_with should end_with "$DEVELOPMENT_IMAGE"
        End
      End
    End
  End

  Describe "stop"
    Context "when development container does not exist"
      It "should fail with the expected error message"
        When run docker stop
        The status should be failure
        The variable fail_called_with should equal "Development container does not exist. Run 'kano docker start'"
      End
    End

    Context "when development container exists"
      DOES_DEVELOPMENT_CONTAINER_EXIST=true
      It "should stop container"
        When run docker stop
        The status should be success
        The variable docker_called_with should equal "stop $DEVELOPMENT_CONTAINER"
      End
    End
  End

  Describe "attach"
    Context "when development container does not exist"
      It "should fail with the expected error message"
        When run docker attach
        The status should be failure
        The variable fail_called_with should equal "Development container does not exist. Run 'kano docker start'"
      End
    End

    Context "when development container exists"
      DOES_DEVELOPMENT_CONTAINER_EXIST=true
      It "should attach to container"
        When run docker attach
        The status should be success
        The variable docker_called_with should equal "attach $DEVELOPMENT_CONTAINER"
      End

      Context "when passing extra docker attach flags"
        It "should attach to container with extra flags"
          When run docker attach --no-stdin
          The status should be success
          The variable docker_called_with should start_with "attach"
          The variable docker_called_with should include "--no-stdin"
          The variable docker_called_with should end_with "$DEVELOPMENT_CONTAINER"
        End
      End

      Context "when passing extra docker attach options"
        It "should attach to container with extra options"
          When run docker attach --detach-keys ctrl-y
          The status should be success
          The variable docker_called_with should start_with "attach"
          The variable docker_called_with should include "--detach-keys ctrl-y"
          The variable docker_called_with should end_with "$DEVELOPMENT_CONTAINER"
        End
      End
    End
  End
End
