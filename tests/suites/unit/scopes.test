#!/bin/sh

Include "$KANO_SOURCE_DIRECTORY/scopes"

SOME_TEAM="some_team"

Describe "scopes"
  fail() {
    # shellcheck disable=SC2034
    fail_called_with="$*"
    %preserve fail_called_with
    exit 1
  }

  Describe "list_all_in_order"
    It "should list all scopes in order"
      When run scopes list_all_in_order
      The status should be success
      The output should equal "project
user
system
builtin"
    End

    Context "when KANO_TEAM is set"
      export KANO_TEAM="$SOME_TEAM"
      It "should list all scopes in order, including team"
        When run scopes list_all_in_order
        The status should be success
        The output should equal "project
user
team
system
builtin"
      End
    End
  End

  Describe "list_all_in_reverse"
    It "should list all scopes in reverse"
      When run scopes list_all_in_reverse
      The status should be success
      The output should equal "builtin
system
user
project"
    End

    Context "when KANO_TEAM is set"
      export KANO_TEAM="$SOME_TEAM"
      It "should list all scopes in reverse, including team"
        When run scopes list_all_in_reverse
        The status should be success
        The output should equal "builtin
system
team
user
project"
      End
    End
  End

  Describe "from_flag"
    Context "when flag is unknown"
      SOME_UNKNOWN_FLAG="-x"
      It "should fail with the expected error message"
        When run scopes from_flag "$SOME_UNKNOWN_FLAG"
        The status should be failure
        The variable fail_called_with should equal "Invalid flag '$SOME_UNKNOWN_FLAG'"
      End
    End

    Context "when flag is -u"
      It "should return user scope"
        When run scopes from_flag "-u"
        The status should be success
        The output should equal "user"
      End
    End

    Context "when flag is --user"
      It "should return user scope"
        When run scopes from_flag "--user"
        The status should be success
        The output should equal "user"
      End
    End

    Context "when flag is -t"
      It "should return team scope"
        When run scopes from_flag "-t"
        The status should be success
        The output should equal "team"
      End
    End

    Context "when flag is --team"
      It "should return team scope"
        When run scopes from_flag "--team"
        The status should be success
        The output should equal "team"
      End
    End

    Context "when flag is -s"
      It "should return system scope"
        When run scopes from_flag "-s"
        The status should be success
        The output should equal "system"
      End
    End

    Context "when flag is --system"
      It "should return system scope"
        When run scopes from_flag "--system"
        The status should be success
        The output should equal "system"
      End
    End

    Context "when flag is -b"
      It "should return builtin scope"
        When run scopes from_flag "-b"
        The status should be success
        The output should equal "builtin"
      End
    End

    Context "when flag is --builtin"
      It "should return builtin scope"
        When run scopes from_flag "--builtin"
        The status should be success
        The output should equal "builtin"
      End
    End
  End

  Describe "to_directory"
    Context "when name is unknown"
      SOME_UNKNOWN_SCOPE="some_unknown_scope"
      It "should fail with the expected error message"
        When run scopes to_directory "$SOME_UNKNOWN_SCOPE"
        The status should be failure
        The variable fail_called_with should equal "Invalid scope '$SOME_UNKNOWN_SCOPE'"
      End
    End

    Context "when name is project"
      It "should return project directory"
        When run scopes to_directory "project"
        The status should be success
        The output should equal "$KANO_PROJECT_DIRECTORY"
      End
    End

    Context "when name is user"
      It "should return user directory"
        When run scopes to_directory "user"
        The status should be success
        The output should equal "$KANO_USER_DIRECTORY"
      End
    End

    Context "when name is team"
      Context "when KANO_TEAM is not set"
        It "should fail with the expected error message"
          When run scopes to_directory "team"
          The status should be failure
          The variable fail_called_with should equal \
            "Cannot map team directory (KANO_TEAM is not set)"
        End
      End

      Context "when KANO_TEAM is set"
        export KANO_TEAM="$SOME_TEAM"
        It "should return team's directory"
          When run scopes to_directory "team"
          The status should be success
          The output should equal "$KANO_TEAMS_DIRECTORY/$SOME_TEAM"
        End
      End
    End

    Context "when name is system"
      It "should return system directory"
        When run scopes to_directory "system"
        The status should be success
        The output should equal "$KANO_SYSTEM_DIRECTORY"
      End
    End

    Context "when name is builtin"
      It "should return builtin directory"
        When run scopes to_directory "builtin"
        The status should be success
        The output should equal "$KANO_BUILTIN_DIRECTORY"
      End
    End
  End
End
