#!/bin/sh

. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_directory_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_file_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/fail"

SYSTEM_DOCKER="$(command -v docker || echo)"
DEVELOPMENT_IMAGE="kano_${KANO_PROJECT_NAME}:local"

docker_help() {
  echo "Run project tasks inside a Docker container"
}

docker() {
  if ! _is_docker_installed; then
    fail "Docker is not installed"
  fi

  if ! does_directory_exist "$KANO_PROJECT_DIRECTORY"; then
    fail "No kano directory exists in project"
  fi

  if ! does_file_exist "$KANO_PROJECT_DIRECTORY/Dockerfile"; then
    fail "No Dockerfile in project kano directory"
  fi

  build() {
    if _does_development_image_exist; then
      _docker_build --cache-from "$DEVELOPMENT_IMAGE" "$@"

    else
      _docker_build "$@"
    fi
  }

  delete() {
    if _does_development_image_exist; then
      _docker image rm "$DEVELOPMENT_IMAGE"
    fi
  }

  run() {
    if ! _does_development_image_exist; then
      fail "Development image does not exist. Run 'kano docker build'"
    fi

    # shellcheck disable=SC2046
    _docker run \
      --rm \
      --log-driver=none \
      --volume "$PWD:$PWD" \
      --workdir "$PWD" \
      $(_insert_image_between_docker_run_options_and_command "$@" | xargs)
  }

  "$@"
}

_docker_build() {
  _docker build \
    --file "$KANO_PROJECT_DIRECTORY/Dockerfile" \
    --tag "$DEVELOPMENT_IMAGE" \
    "$@" .
}

_insert_image_between_docker_run_options_and_command() {
  HAS_INSERTED_IMAGE=false
  IS_EXPECTING_VALUE=false
  for ARGUMENT in "$@"; do
    if $HAS_INSERTED_IMAGE; then
      echo "$ARGUMENT"

    elif _is_docker_run_flag "$ARGUMENT"; then
      echo "$ARGUMENT"

    elif _is_option_or_flag "$ARGUMENT"; then
      echo "$ARGUMENT"
      IS_EXPECTING_VALUE=true

    elif $IS_EXPECTING_VALUE; then
      echo "$ARGUMENT"
      IS_EXPECTING_VALUE=false

    else
      echo "$DEVELOPMENT_IMAGE"
      echo "$ARGUMENT"
      HAS_INSERTED_IMAGE=true
    fi
  done
}

_is_docker_run_flag() {
  case "$1" in
    --detach | \
      -d* | \
      --disable-content-trust | \
      --help | \
      --init | \
      --interactive | \
      -i* | \
      --no-healthcheck | \
      --privileged | \
      --read-only | \
      --rm | \
      --sig-proxy | \
      --tty | \
      -t*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_option_or_flag() {
  case "$1" in
    -*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_does_development_image_exist() {
  _docker image inspect "$DEVELOPMENT_IMAGE" > /dev/null 2>&1
  return $?
}

_is_docker_installed() {
  [ -n "$SYSTEM_DOCKER" ]
  return $?
}

_docker() {
  "$SYSTEM_DOCKER" "$@"
}
