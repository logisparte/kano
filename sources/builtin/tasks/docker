#!/bin/sh

. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_directory_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_file_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/fail"

docker_help() {
  echo "Develop in a docker container"
}

docker() {
  if [ -n "$KANO_DOCKER" ] && "$KANO_DOCKER"; then
    fail "Cannot run docker task inside a development container"
  fi

  if ! _is_docker_installed; then
    fail "Docker is not installed"
  fi

  _ensure_docker_daemon_is_running

  if [ -z "$KANO_DOCKER_IMAGE" ]; then
    export KANO_DOCKER_IMAGE="$KANO_PROJECT_NAME-dev"
  fi

  if [ -z "$KANO_DOCKER_CONTAINER" ]; then
    export KANO_DOCKER_CONTAINER="$KANO_PROJECT_NAME-dev-container"
  fi

  image() {
    build() {
      if ! does_directory_exist "$KANO_PROJECT_DIRECTORY"; then
        fail "No kano directory exists in project"
      fi

      if ! does_file_exist "$KANO_PROJECT_DIRECTORY/Dockerfile"; then
        fail "No Dockerfile in project kano directory"
      fi

      # shellcheck disable=SC2046
      _docker image build \
        --file "$KANO_PROJECT_DIRECTORY/Dockerfile" \
        --tag "$KANO_DOCKER_IMAGE" \
        $(_does_image_exist && echo "--cache-from $KANO_DOCKER_IMAGE") \
        "$@" .
    }

    rm() {
      if ! _does_image_exist; then
        fail "Development image does not exist"
      fi

      _docker image rm "$@" "$KANO_DOCKER_IMAGE"
    }

    "$@"
  }

  container() {
    create() {
      if ! _does_image_exist; then
        fail "Development image does not exist. Run 'kano docker image build'"
      fi

      if _does_container_exist; then
        fail "Development container already exists"
      fi

      USER_ID="$(id -u)"
      USER_NAME="$(id -un)"
      _docker container create \
        --env KANO_DOCKER=true \
        --env KANO_DOCKER_IMAGE \
        --env KANO_DOCKER_CONTAINER \
        --log-driver none \
        --name "$KANO_DOCKER_CONTAINER" \
        --rm \
        --volume "$PWD:$PWD" \
        --workdir "$PWD" \
        "$@" \
        "$KANO_DOCKER_IMAGE" \
        /bin/sh -c "\
sudo useradd --uid $USER_ID --gid sudo --no-create-home --home-dir $HOME $USER_NAME; \
sudo passwd --delete $USER_NAME > /dev/null; \
sudo chown -R $USER_NAME $HOME; \
sh -c 'kill -STOP \$\$'"
    }

    rm() {
      if ! _does_container_exist; then
        fail "Development container does not exist"
      fi

      if _is_container_running; then
        fail "Development container is running. Run 'kano docker container stop'"
      fi

      _docker container rm "$@" "$KANO_DOCKER_CONTAINER"
    }

    start() {
      if ! _does_container_exist; then
        fail "Development container does not exist. Run 'kano docker container create'"
      fi

      if _is_container_running; then
        fail "Development container is already running"
      fi

      _docker container start "$@" "$KANO_DOCKER_CONTAINER"
    }

    stop() {
      if ! _does_container_exist; then
        fail "Development container does not exist"
      fi

      if ! _is_container_running; then
        fail "Development container is not running"
      fi

      _docker container stop "$@" "$KANO_DOCKER_CONTAINER"
    }

    exec_() {
      if ! _does_container_exist; then
        fail "Development container does not exist. Run 'kano docker container create'"
      fi

      if ! _is_container_running; then
        fail "Development container is not running. Run 'kano docker container start'"
      fi

      # shellcheck disable=SC2046
      _docker container 'exec' \
        --user "$(id -un)" \
        --workdir "$PWD" \
        $(_insert_container_in_exec_arguments "$@" | xargs)
    }

    if [ "$1" = "exec" ]; then
      shift
      exec_ "$@"

    else
      "$@"
    fi
  }

  # Native Docker shortcuts

  build() {
    image build "$@"
  }

  rmi() {
    image rm "$@"
  }

  create() {
    container create "$@"
  }

  rm() {
    container rm "$@"
  }

  start() {
    container start "$@"
  }

  stop() {
    container stop "$@"
  }

  exec_() {
    container exec_ "$@"
  }

  # kano docker shortcuts

  execute() {
    if ! _does_image_exist; then
      kano docker image build
    fi

    if ! _does_container_exist; then
      kano docker container create
    fi

    if ! _is_container_running; then
      kano docker container start
    fi

    kano docker container exec_ "$@"
  }

  shell() {
    if ! _does_image_exist; then
      kano docker image build
    fi

    if ! _does_container_exist; then
      kano docker container create
    fi

    if ! _is_container_running; then
      kano docker container start
    fi

    kano docker container exec_ --interactive --tty "$SHELL" --login
  }

  clean() {
    if _is_container_running; then
      kano docker container stop
    fi

    if _does_container_exist; then
      kano docker container rm
    fi

    if _does_image_exist; then
      kano docker image rm
    fi
  }

  if [ "$1" = "exec" ]; then
    shift
    exec_ "$@"

  else
    "$@"
  fi
}

_insert_container_in_exec_arguments() {
  IS_CONTAINER_INSERTED=false
  IS_EXPECTING_OPTION_VALUE=false
  for ARGUMENT in "$@"; do
    if $IS_CONTAINER_INSERTED; then
      echo "$ARGUMENT"
      continue
    fi

    if _is_container_exec_flag "$ARGUMENT"; then
      echo "$ARGUMENT"
      continue
    fi

    if _is_flag_or_option "$ARGUMENT"; then
      IS_EXPECTING_OPTION_VALUE=true
      echo "$ARGUMENT"
      continue
    fi

    if $IS_EXPECTING_OPTION_VALUE; then
      IS_EXPECTING_OPTION_VALUE=false

    else
      echo "$KANO_DOCKER_CONTAINER"
      IS_CONTAINER_INSERTED=true
    fi

    echo "$ARGUMENT"
  done
}

_is_container_exec_flag() {
  case "$1" in
    --detach | \
      -d* | \
      --help | \
      --interactive | \
      -i* | \
      --privileged | \
      --tty | \
      -t*)
      true
      ;;

    *)
      false
      ;;
  esac
}

 _is_flag_or_option() {
  case "$1" in
    -*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_docker_installed() {
  _docker --help > /dev/null 2>&1
}

_ensure_docker_daemon_is_running() {
  _docker version > /dev/null
}

_does_image_exist() {
  [ -n "$(_docker image ls --quiet --filter reference="$KANO_DOCKER_IMAGE")" ]
}

_does_container_exist() {
  [ -n "$(_docker container ls --all --quiet --filter name="$KANO_DOCKER_CONTAINER")" ]
}

_is_container_running() {
  [ -n "$(_docker container ls --quiet --filter name="$KANO_DOCKER_CONTAINER")" ]
}

_docker() {
  command docker "$@"
}
