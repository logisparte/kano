#!/bin/sh

. "$KANO_ROOT_DIRECTORY/builtin/helpers/does_file_exist"
. "$KANO_ROOT_DIRECTORY/builtin/helpers/fail"

docker_help() {
  echo "Develop in a docker container"
}

docker() {
  COMMAND="$1"

  if [ "$COMMAND" = "_init_container" ] || [ "$COMMAND" = "_is_container_ready" ]; then
    "$COMMAND"
    return $?
  fi

  if [ "$KANO_DOCKER" = true ]; then
    fail "Cannot run docker task inside a development container"
  fi

  if ! _is_docker_installed; then
    fail "Docker is not installed"
  fi

  _ensure_docker_daemon_is_running

  export KANO_DOCKER_FILE="${KANO_DOCKER_FILE:-"$KANO_PROJECT_DIRECTORY/Dockerfile"}"
  export KANO_DOCKER_IMAGE="${KANO_DOCKER_IMAGE:-"$KANO_PROJECT_NAME-dev"}"
  export KANO_DOCKER_CONTAINER="${KANO_DOCKER_CONTAINER:-"$KANO_PROJECT_NAME-dev-container"}"
  export KANO_DOCKER_TAG="${KANO_DOCKER_TAG:-latest}"
  if [ -n "$KANO_DOCKER_REGISTRY" ]; then
    WORKING_IMAGE="$KANO_DOCKER_REGISTRY/$KANO_DOCKER_IMAGE:$KANO_DOCKER_TAG"

  else
    WORKING_IMAGE="$KANO_DOCKER_IMAGE:$KANO_DOCKER_TAG"
  fi

  export KANO_DOCKER_USER_ID="${KANO_DOCKER_USER_ID:-"$(id -u | xargs)"}"
  if [ -z "$KANO_DOCKER_USER_ID" ]; then
    fail "Host user ID not found. Set \$KANO_DOCKER_USER_ID to fix"
  fi

  export KANO_DOCKER_USER_NAME="${KANO_DOCKER_USER_NAME:-"$(id -un | xargs)"}"
  if [ -z "$KANO_DOCKER_USER_NAME" ]; then
    fail "Host user name not found. Set \$KANO_DOCKER_USER_NAME to fix"
  fi

  export KANO_DOCKER_USER_HOME="${KANO_DOCKER_USER_HOME:-"$HOME"}"
  if [ -z "$KANO_DOCKER_USER_HOME" ]; then
    fail "Host user home directory not found. Set \$KANO_DOCKER_USER_HOME to fix"
  fi

  image() {
    build() {
      if [ "$KANO_DOCKER_TAG" != "latest" ]; then
        # shellcheck disable=SC2116
        fail "$(
          echo \
            "Cannot rebuild a versioned image." \
            "Run 'kano docker pull' or unset '\$KANO_DOCKER_TAG'"
        )"
      fi

      if ! does_file_exist "$KANO_DOCKER_FILE"; then
        # shellcheck disable=SC2116
        fail "$(
          echo \
            "No Dockerfile at '$KANO_DOCKER_FILE'." \
            "Create one or set '\$KANO_DOCKER_FILE' to configure a different location"
        )"
      fi

      if [ -n "$KANO_DOCKER_REGISTRY" ]; then
        _docker image build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from "$WORKING_IMAGE" \
          --file "$KANO_DOCKER_FILE" \
          --pull \
          --tag "$WORKING_IMAGE" \
          "$@" .

      else
        _docker image build \
          --file "$KANO_DOCKER_FILE" \
          --tag "$WORKING_IMAGE" \
          "$@" .
      fi
    }

    rm() {
      if ! _does_image_exist; then
        fail "Development image does not exist"
      fi

      _docker image rm "$@" "$WORKING_IMAGE"
    }

    pull() {
      if [ -z "$KANO_DOCKER_REGISTRY" ]; then
        fail "No container registry configured. Set '\$KANO_DOCKER_REGISTRY'"
      fi

      # shellcheck disable=SC2046
      _docker image pull $(_insert_image_in_push_or_pull_arguments "$@" | xargs)
    }

    push() {
      if [ -z "$KANO_DOCKER_REGISTRY" ]; then
        fail "No container registry configured. Set '\$KANO_DOCKER_REGISTRY'"
      fi

      # shellcheck disable=SC2046
      _docker image push $(_insert_image_in_push_or_pull_arguments "$@" | xargs)
    }

    tag() {
      TAG="$1"

      if [ -z "$TAG" ]; then
        fail "No tag provided"
      fi

      _docker image tag "$WORKING_IMAGE" "$(echo "$WORKING_IMAGE" | cut -d ":" -f 1):$TAG"
    }

    "$@"
  }

  container() {
    create() {
      if ! _does_image_exist; then
        # shellcheck disable=SC2116
        fail "$(
          echo \
            "Development image does not exist." \
            "Run 'kano docker image build' or 'kano docker image pull'"
        )"
      fi

      if _does_container_exist; then
        fail "Development container already exists"
      fi

      # shellcheck disable=SC2116
      START_COMMAND="$(
        echo \
          "sudo ln -s /opt/kano/lib/kano /usr/bin/kano;" \
          "kano docker _init_container;" \
          "sh -c 'kill -STOP \$\$'"
      )"

      _docker container create \
        --env KANO_DOCKER=true \
        --env KANO_DOCKER_FILE \
        --env KANO_DOCKER_REGISTRY \
        --env KANO_DOCKER_IMAGE \
        --env KANO_DOCKER_TAG \
        --env KANO_DOCKER_CONTAINER \
        --env KANO_DOCKER_USER_ID \
        --env KANO_DOCKER_USER_NAME \
        --env KANO_DOCKER_USER_HOME \
        --log-driver none \
        --name "$KANO_DOCKER_CONTAINER" \
        --rm \
        --volume "$KANO_ROOT_DIRECTORY:/opt/kano/lib" \
        --volume "$PWD:$PWD" \
        --workdir "$PWD" \
        "$@" \
        "$WORKING_IMAGE" \
        /bin/sh -c "$START_COMMAND"
    }

    rm() {
      if ! _does_container_exist; then
        fail "Development container does not exist"
      fi

      if _is_container_running; then
        fail "Development container is running. Run 'kano docker container stop'"
      fi

      _docker container rm "$@" "$KANO_DOCKER_CONTAINER"
    }

    start() {
      if ! _does_container_exist; then
        fail "Development container does not exist. Run 'kano docker container create'"
      fi

      if _is_container_running; then
        fail "Development container is already running"
      fi

      _docker container start "$@" "$KANO_DOCKER_CONTAINER"
      _wait_until_container_ready
    }

    stop() {
      if ! _does_container_exist; then
        fail "Development container does not exist"
      fi

      if ! _is_container_running; then
        fail "Development container is not running"
      fi

      _docker container stop "$@" "$KANO_DOCKER_CONTAINER"
      _docker container 'wait' "$KANO_DOCKER_CONTAINER" > /dev/null 2>&1 || true
    }

    kill_() {
      if ! _does_container_exist; then
        fail "Development container does not exist"
      fi

      if ! _is_container_running; then
        fail "Development container is not running"
      fi

      _docker container 'kill' "$@" "$KANO_DOCKER_CONTAINER"
      _docker container 'wait' "$KANO_DOCKER_CONTAINER" > /dev/null 2>&1 || true
    }

    exec_() {
      if ! _does_container_exist; then
        fail "Development container does not exist. Run 'kano docker container create'"
      fi

      if ! _is_container_running; then
        fail "Development container is not running. Run 'kano docker container start'"
      fi

      # shellcheck disable=SC2046
      _docker container 'exec' \
        --user "$KANO_DOCKER_USER_NAME" \
        --workdir "$PWD" \
        $(_insert_container_in_exec_arguments "$@" | xargs)
    }

    case "$1" in
      exec | kill)
        SUBCOMMAND="${1}_"
        shift
        "$SUBCOMMAND" "$@"
        ;;

      *)
        "$@"
        ;;
    esac
  }

  # Native Docker shortcuts

  build() {
    _kano docker image build "$@"
  }

  rmi() {
    _kano docker image rm "$@"
  }

  pull() {
    _kano docker image pull "$@"
  }

  push() {
    _kano docker image push "$@"
  }

  tag() {
    _kano docker image tag "$@"
  }

  create() {
    _kano docker container create "$@"
  }

  rm() {
    _kano docker container rm "$@"
  }

  start() {
    _kano docker container start "$@"
  }

  stop() {
    _kano docker container stop "$@"
  }

  kill_() {
    _kano docker container kill_ "$@"
  }

  exec_() {
    _kano docker container exec_ "$@"
  }

  # kano docker shortcuts

  boot() {
    if ! _does_image_exist; then
      if [ "$KANO_DOCKER_TAG" = "latest" ]; then
        _kano docker image build

      else
        _kano docker image pull
      fi
    fi

    if ! _does_container_exist; then
      _kano docker container create
    fi

    if ! _is_container_running; then
      _kano docker container start
    fi
  }

  execute() {
    _kano docker boot
    _kano docker container exec_ "$@"
  }

  shell() {
    _kano docker execute --interactive --tty "${SHELL:-/bin/sh}" --login
  }

  clean() {
    if _is_container_running; then
      _kano docker container 'kill'
    fi

    if _does_container_exist; then
      _kano docker container rm
    fi

    if _does_image_exist; then
      _kano docker image rm
    fi
  }

  case "$1" in
    exec | kill)
      SUBCOMMAND="${1}_"
      shift
      "$SUBCOMMAND" "$@"
      ;;

    *)
      "$@"
      ;;
  esac
}

_init_container() {
  if [ "$KANO_DOCKER" != true ]; then
    fail "Container must be initialized from inside the container"
  fi

  sudo useradd \
    --uid "$KANO_DOCKER_USER_ID" \
    --gid "sudo" \
    --no-create-home \
    --home-dir "$KANO_DOCKER_USER_HOME" \
    "$KANO_DOCKER_USER_NAME"
  sudo passwd --delete "$KANO_DOCKER_USER_NAME" > /dev/null
  sudo chown -R "$KANO_DOCKER_USER_NAME" "$KANO_DOCKER_USER_HOME"
  sudo mkdir -p /var/kano
  sudo touch /var/kano/kano_docker_ready
}

_is_container_ready() {
  if [ "$KANO_DOCKER" != true ]; then
    fail "Container readiness must be checked from inside the container"
  fi

  does_file_exist "/var/kano/kano_docker_ready"
}

_wait_until_container_ready() {
  RETRIES=30
  while [ "$RETRIES" -gt 0 ]; do
    if _docker container 'exec' "$KANO_DOCKER_CONTAINER" \
        kano docker _is_container_ready 2> /dev/null; then
      return
    fi

    sleep 1
    RETRIES=$((RETRIES - 1))
  done

  fail "Development container could not initialize correctly"
}

_insert_image_in_push_or_pull_arguments() {
  IS_EXPECTING_OPTION_VALUE=false
  for ARGUMENT in "$@"; do
    if _is_image_push_or_pull_flag "$ARGUMENT"; then
      echo "$ARGUMENT"

    elif _is_flag_or_option "$ARGUMENT"; then
      IS_EXPECTING_OPTION_VALUE=true
      echo "$ARGUMENT"

    elif $IS_EXPECTING_OPTION_VALUE; then
      IS_EXPECTING_OPTION_VALUE=false
      echo "$ARGUMENT"

    else
      TAG="$ARGUMENT"
      echo "$(echo "$WORKING_IMAGE" | cut -d ":" -f 1):$TAG"
      return
    fi
  done

  echo "$WORKING_IMAGE"
}

_insert_container_in_exec_arguments() {
  IS_CONTAINER_INSERTED=false
  IS_EXPECTING_OPTION_VALUE=false
  for ARGUMENT in "$@"; do
    if $IS_CONTAINER_INSERTED; then
      echo "$ARGUMENT"
      continue
    fi

    if _is_container_exec_flag "$ARGUMENT"; then
      echo "$ARGUMENT"
      continue
    fi

    if _is_flag_or_option "$ARGUMENT"; then
      IS_EXPECTING_OPTION_VALUE=true
      echo "$ARGUMENT"
      continue
    fi

    if $IS_EXPECTING_OPTION_VALUE; then
      IS_EXPECTING_OPTION_VALUE=false

    else
      echo "$KANO_DOCKER_CONTAINER"
      IS_CONTAINER_INSERTED=true
    fi

    echo "$ARGUMENT"
  done
}

_is_image_push_or_pull_flag() {
  case "$1" in
    --all-tags | \
      -a* | \
      --disable-content-trust | \
      --help | \
      --quiet | \
      -q*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_container_exec_flag() {
  case "$1" in
    --detach | \
      -d* | \
      --help | \
      --interactive | \
      -i* | \
      --privileged | \
      --tty | \
      -t*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_flag_or_option() {
  case "$1" in
    -*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_docker_installed() {
  _docker --help > /dev/null 2>&1
}

_ensure_docker_daemon_is_running() {
  _docker version > /dev/null
}

_does_image_exist() {
  [ -n "$(_docker image ls --quiet --filter reference="$WORKING_IMAGE" | xargs)" ]
}

_does_container_exist() {
  [ -n "$(_docker container ls --all --quiet --filter name="$KANO_DOCKER_CONTAINER" | xargs)" ]
}

_is_container_running() {
  [ -n "$(_docker container ls --quiet --filter name="$KANO_DOCKER_CONTAINER" | xargs)" ]
}

_kano() {
  # Execute a new kano call to catch user-defined task overloads (used for shortcuts)
  command kano "$@"
}

_docker() {
  command docker "$@"
}
