#!/bin/sh

. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_directory_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_file_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/fail"

docker_help() {
  echo "Work in an isolated development docker container"
}

docker() {
  if [ -z "$KANO_DEVELOPMENT_IMAGE" ]; then
    export KANO_DEVELOPMENT_IMAGE="$KANO_PROJECT_NAME-dev"
  fi

  if [ -z "$KANO_DEVELOPMENT_CONTAINER" ]; then
    export KANO_DEVELOPMENT_CONTAINER="$KANO_PROJECT_NAME-dev-container"
  fi

  if _is_inside_development_container; then
    fail "Cannot run docker task inside a development container"
  fi

  if ! _is_docker_installed; then
    fail "Docker is not installed"
  fi

  if ! _is_docker_daemon_running; then
    fail "Docker daemon is not running"
  fi

  if ! does_directory_exist "$KANO_PROJECT_DIRECTORY"; then
    fail "No kano directory exists in project"
  fi

  if ! does_file_exist "$KANO_PROJECT_DIRECTORY/Dockerfile"; then
    fail "No Dockerfile in project kano directory"
  fi

  build() {
    if _does_development_image_exist; then
      _docker_build --cache-from "$KANO_DEVELOPMENT_IMAGE" "$@"

    else
      _docker_build "$@"
    fi
  }

  delete() {
    if _does_development_image_exist; then
      _docker image rm "$KANO_DEVELOPMENT_IMAGE"
    fi
  }

  run() {
    if ! _does_development_image_exist; then
      fail "Development image does not exist. Run 'kano docker build'"
    fi

    # shellcheck disable=SC2046
    _docker_run $(_insert_image_between_docker_run_options_and_command "$@" | xargs)
  }

  start() {
    if ! _does_development_image_exist; then
      fail "Development image does not exist. Run 'kano docker build'"
    fi

    _docker_run \
      --detach \
      --interactive \
      --name "$KANO_DEVELOPMENT_CONTAINER" \
      --tty \
      "$@" "$KANO_DEVELOPMENT_IMAGE"
  }

  stop() {
    if ! _does_development_container_exist; then
      fail "Development container does not exist. Run 'kano docker start'"
    fi

    _docker stop "$KANO_DEVELOPMENT_CONTAINER"
  }

  attach() {
    if ! _does_development_container_exist; then
      fail "Development container does not exist. Run 'kano docker start'"
    fi

    _docker attach "$@" "$KANO_DEVELOPMENT_CONTAINER"
  }

  enter() {
    sh -c "kano docker start && kano docker attach"
  }

  "$@"
}

_docker_build() {
  _docker build \
    --file "$KANO_PROJECT_DIRECTORY/Dockerfile" \
    --tag "$KANO_DEVELOPMENT_IMAGE" \
    "$@" .
}

_docker_run() {
  _docker run \
    --env KANO_IS_IN_DOCKER=true \
    --log-driver none \
    --rm \
    --volume "$PWD:$PWD" \
    --workdir "$PWD" \
    "$@"
}

_insert_image_between_docker_run_options_and_command() {
  HAS_INSERTED_IMAGE=false
  IS_EXPECTING_VALUE=false
  for ARGUMENT in "$@"; do
    if $HAS_INSERTED_IMAGE; then
      echo "$ARGUMENT"

    elif _is_docker_run_flag "$ARGUMENT"; then
      echo "$ARGUMENT"

    elif _is_option_or_flag "$ARGUMENT"; then
      echo "$ARGUMENT"
      IS_EXPECTING_VALUE=true

    elif $IS_EXPECTING_VALUE; then
      echo "$ARGUMENT"
      IS_EXPECTING_VALUE=false

    else
      echo "$KANO_DEVELOPMENT_IMAGE"
      echo "$ARGUMENT"
      HAS_INSERTED_IMAGE=true
    fi
  done
}

_is_docker_run_flag() {
  case "$1" in
    --detach | \
      -d* | \
      --disable-content-trust | \
      --help | \
      --init | \
      --interactive | \
      -i* | \
      --no-healthcheck | \
      --privileged | \
      --read-only | \
      --rm | \
      --sig-proxy | \
      --tty | \
      -t*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_is_option_or_flag() {
  case "$1" in
    -*)
      true
      ;;

    *)
      false
      ;;
  esac
}

_does_development_image_exist() {
  _docker image inspect "$KANO_DEVELOPMENT_IMAGE" > /dev/null 2>&1
}

_does_development_container_exist() {
  _docker container inspect "$KANO_DEVELOPMENT_CONTAINER" > /dev/null 2>&1
}

_is_docker_installed() {
  _docker --help > /dev/null 2>&1
}

_is_docker_daemon_running() {
  _docker system info > /dev/null 2>&1
}

_is_inside_development_container() {
  [ -n "$KANO_IS_IN_DOCKER" ]
}

_docker() {
  command docker "$@"
}
