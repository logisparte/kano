#!/bin/sh

. "$SOURCE_DIRECTORY/builtin/helpers/colorize"
. "$SOURCE_DIRECTORY/builtin/helpers/does_symbol_exist"
. "$SOURCE_DIRECTORY/builtin/helpers/list_files_in_directory"
. "$SOURCE_DIRECTORY/builtin/helpers/report"
. "$SOURCE_DIRECTORY/scope_mapper"
. "$SOURCE_DIRECTORY/scope_walker"

help_help() {
  echo "Show this help message"
}

help() {
  OUTPUT="$(_get_output)"
  _format_output "$OUTPUT"
}

_get_output() {
  for WALKED_SCOPE in $(scope_walker walk_up); do
    _get_scope_output "$WALKED_SCOPE"
  done
}

_get_scope_output() {
  SCOPE="$1"

  SCOPE_COLOR="$(_map_color_from_name "$SCOPE")"
  _get_scope_title_output "$SCOPE" "$SCOPE_COLOR"
  _get_scope_content_output "$SCOPE" "$SCOPE_COLOR"
}

_get_scope_title_output() {
  SCOPE="$1"
  SCOPE_COLOR="$2"

  report message "|"
  if [ "$SCOPE" = "team" ]; then
    report message "$(colorize "# team ($KANO_TEAM) tasks" "$SCOPE_COLOR")|"

  else
    report message "$(colorize "# $SCOPE tasks" "$SCOPE_COLOR")|"
  fi

  report message "|"
}

_get_scope_content_output() {
  SCOPE="$1"
  SCOPE_COLOR="$2"

  SCOPE_DIRECTORY="$(scope_mapper map_directory_from_name "$SCOPE")"
  SCOPE_TASK_DIRECTORY="$SCOPE_DIRECTORY/tasks"
  for TASK in $(list_files_in_directory "$SCOPE_TASK_DIRECTORY"); do
    _get_task_output "$SCOPE_COLOR" "$SCOPE_TASK_DIRECTORY" "$TASK"
  done
}

_get_task_output() {
  SCOPE_COLOR="$1"
  SCOPE_TASK_DIRECTORY="$2"
  TASK="$3"

  _import "$SCOPE_TASK_DIRECTORY/$TASK"

  TASK_HELP_FUNCTION="${TASK}_help"
  if does_symbol_exist "$TASK_HELP_FUNCTION"; then
    TASK_HELP="$("$TASK_HELP_FUNCTION")"

  else
    TASK_HELP="-"
  fi

  report message "$(colorize "$TASK" "$SCOPE_COLOR")|$TASK_HELP"
}

_map_color_from_name() {
  SCOPE="$1"

  case "$SCOPE" in
    project)
      echo "green"
      ;;

    user)
      echo "purple"
      ;;

    team)
      echo "blue"
      ;;

    system)
      echo "gray"
      ;;

    builtin)
      echo "cyan"
      ;;

    *)
      echo "white"
      ;;
  esac
}

_format_output() {
  OUTPUT="$1"

  echo "$OUTPUT" | awk -F "|" '{printf "%-32s %s\n", $1, $2}'
}

_import() {
  . "$1"
}
