#!/bin/sh

. "$KANO_SOURCE_DIRECTORY/builtin/helpers/does_directory_exist"
. "$KANO_SOURCE_DIRECTORY/builtin/helpers/fail"

scopes() {
  PROJECT_SCOPE="project"
  USER_SCOPE="user"
  TEAM_SCOPE="team"
  SYSTEM_SCOPE="system"
  BUILTIN_SCOPE="builtin"

  list_all_in_order() {
    echo "$PROJECT_SCOPE"
    echo "$USER_SCOPE"

    if [ -n "$KANO_TEAM" ]; then
      echo "$TEAM_SCOPE"
    fi

    echo "$SYSTEM_SCOPE"
    echo "$BUILTIN_SCOPE"
  }

  list_all_existing_in_order() {
    for SCOPE in $(list_all_in_order); do
      SCOPE_DIRECTORY="$(to_directory "$SCOPE")"
      if does_directory_exist "$SCOPE_DIRECTORY"; then
        echo "$SCOPE"
      fi
    done
  }

  list_all_in_reverse() {
    list_all_in_order | xargs | awk '{ for (i=NF; i>0; i--) printf "%s\n",$i; }'
  }

  list_all_existing_in_reverse() {
    list_all_existing_in_order | xargs | awk '{ for (i=NF; i>0; i--) printf "%s\n",$i; }'
  }

  from_flag() {
    FLAG="$1"

     case "$FLAG" in
      -u | --user)
        echo "$USER_SCOPE"
        ;;

      -t | --team)
        echo "$TEAM_SCOPE"
        ;;

      -s | --system)
        echo "$SYSTEM_SCOPE"
        ;;

      -b | --builtin)
        echo "$BUILTIN_SCOPE"
        ;;

      *)
        fail "Invalid flag '$FLAG'"
        ;;
    esac
  }

  to_directory() {
    SCOPE="$1"

    case "$SCOPE" in
      "$PROJECT_SCOPE")
        echo "$KANO_PROJECT_DIRECTORY"
        ;;

      "$USER_SCOPE")
        echo "$KANO_USER_DIRECTORY"
        ;;

      "$TEAM_SCOPE")
        if [ -n "$KANO_TEAM" ]; then
          echo "$KANO_TEAMS_DIRECTORY/$KANO_TEAM"

        else
          fail "Cannot map team directory (KANO_TEAM is not set)"
        fi
        ;;

      "$SYSTEM_SCOPE")
        echo "$KANO_SYSTEM_DIRECTORY"
        ;;

      "$BUILTIN_SCOPE")
        echo "$KANO_BUILTIN_DIRECTORY"
        ;;

      *)
        fail "Invalid scope '$SCOPE'"
        ;;
    esac
  }

  "$@"
}
